[{"title":"NodeJs 学习","url":"/2023/06/08/NodeJs-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"node-js-介绍\"><a href=\"#node-js-介绍\" class=\"headerlink\" title=\"node.js 介绍\"></a>node.js 介绍</h2><h3 id=\"node-js-是什么？\"><a href=\"#node-js-是什么？\" class=\"headerlink\" title=\"node.js 是什么？\"></a>node.js 是什么？</h3><ol>\n<li>node.js 是一个开发平台，就像Java开发平台、.Net开发平台、PHP开发平台、Apple开发平台一样。</li>\n</ol>\n<ul>\n<li>何为开发平台？有对应的编程语言、有语言运行时、有能实现特定功能的API(SDK：Software Development Kit)</li>\n</ul>\n<ol start=\"2\">\n<li>nodejs平台使用的编程语言是 JavaScript 语言。</li>\n</ol>\n<ul>\n<li>不支持 window、document、bom 对象。</li>\n</ul>\n<ol start=\"3\">\n<li><p>node.js平台是基于 Chrome V8 JavaScript 引擎构建。</p>\n</li>\n<li><p>基于 node.js 可以开发控制台程序(命令行程序、CLI程序)、桌面应用程序(GUI)(借助 node-webkit、electron 等框架实现)、Web 应用程序(网站)。</p>\n</li>\n</ol>\n<blockquote>\n<p>PHP开发技术栈: LAMP - Linux Apache MySQL PHP<br>node.js 全栈开发技术栈: MEAN - MongoDB Express Angular Node.js</p>\n</blockquote>\n<h3 id=\"node-js-有哪些特点？\"><a href=\"#node-js-有哪些特点？\" class=\"headerlink\" title=\"node.js 有哪些特点？\"></a>node.js 有哪些特点？</h3><ol>\n<li>事件驱动(当事件被触发时，执行传递过去的回调函数)</li>\n<li>非阻塞 I&#x2F;O 模型(当执行I&#x2F;O操作时，不会阻塞线程)</li>\n<li>单线程</li>\n<li>拥有世界最大的开源库生态系统 —— npm。</li>\n</ol>\n<h3 id=\"node-js-网站\"><a href=\"#node-js-网站\" class=\"headerlink\" title=\"node.js 网站\"></a>node.js 网站</h3><ol>\n<li><a href=\"https://nodejs.org/en\">node.js官方网站</a></li>\n<li><a href=\"https://nodejs.cn/\">node.js中文网</a></li>\n<li><a href=\"https://cnodejs.org/\">node.js中文社区</a></li>\n</ol>\n<h3 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h3><ol>\n<li>了解服务器开发过程</li>\n<li>会使用 node.js 开发基本的 http 服务程序(Web应用程序)</li>\n</ol>\n<h3 id=\"Node-js可以用来做什么？\"><a href=\"#Node-js可以用来做什么？\" class=\"headerlink\" title=\"Node.js可以用来做什么？\"></a>Node.js可以用来做什么？</h3><ul>\n<li>具有复杂逻辑的动态网站</li>\n<li>WebSocket服务器</li>\n<li>命令行工具</li>\n<li>带有图形界面的本地应用程序</li>\n<li>···</li>\n</ul>\n<h2 id=\"终端基本使用\"><a href=\"#终端基本使用\" class=\"headerlink\" title=\"终端基本使用\"></a>终端基本使用</h2><h3 id=\"打开应用\"><a href=\"#打开应用\" class=\"headerlink\" title=\"打开应用\"></a>打开应用</h3><ul>\n<li>notepad 打开记事本</li>\n<li>mspaint 打开画图</li>\n<li>calc 打开计算机</li>\n<li>write 打开写字板</li>\n<li>sysdm.cpl 打开环境变量设置窗口</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>md 创建目录</li>\n<li>rmdir(rd) 删除目录，目录内没有文档</li>\n<li>echo on a.txt 创建空文件</li>\n<li>del 删除文件</li>\n<li>rm 文件名 删除文件</li>\n</ul>\n<h3 id=\"Node-js开发环境准备\"><a href=\"#Node-js开发环境准备\" class=\"headerlink\" title=\"Node.js开发环境准备\"></a>Node.js开发环境准备</h3><ol>\n<li><p>普通安装方式<a href=\"https://nodejs.org/zh-cn\">官方网站</a></p>\n</li>\n<li><p>多版本安装方式</p>\n</li>\n</ol>\n<ul>\n<li>卸载已有的Node.js</li>\n<li>下载nvm</li>\n<li>在C盘创建目录dev</li>\n<li>在dev目中中创建两个子目录nvm和nodejs</li>\n<li>并且把nvm包解压进去nvm目录中</li>\n<li>在install.cmd文件上面右键选择【以管理员身份运行】</li>\n<li>打开的cmd窗口直接回车会生成一个settings.txt文件，修改文件中配置信息</li>\n<li>配置nvm和Node.js环境变量</li>\n</ul>\n<blockquote>\n<p>NVM_HOME:C:\\dev\\nvm<br>NVM_SYMLINK:C:\\dev\\nodejs</p>\n</blockquote>\n<ul>\n<li>把配置好的两个环境变量加到Path中</li>\n</ul>\n<h3 id=\"nvm常用的命令\"><a href=\"#nvm常用的命令\" class=\"headerlink\" title=\"nvm常用的命令\"></a>nvm常用的命令</h3><ul>\n<li>nvm list 查看当前安装的Node.js所有版本</li>\n<li>nvm install 版本号 安装指定版本的Node.js</li>\n<li>nvm uninstall 版本号 卸载指定版本的Node.js</li>\n<li>nvm use 版本号 选择指定版本的Node.js</li>\n</ul>\n<h3 id=\"Node-js之HelloWorld\"><a href=\"#Node-js之HelloWorld\" class=\"headerlink\" title=\"Node.js之HelloWorld\"></a>Node.js之HelloWorld</h3><ul>\n<li>命令行方式REPL</li>\n<li>运行文件方式</li>\n<li>全局对象概览</li>\n</ul>\n<h3 id=\"Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net等传统模式开发Web应用程序区别\"><a href=\"#Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net等传统模式开发Web应用程序区别\" class=\"headerlink\" title=\"Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net等传统模式开发Web应用程序区别\"></a>Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net等传统模式开发Web应用程序区别</h3><ol>\n<li><h4 id=\"传统模式\"><a href=\"#传统模式\" class=\"headerlink\" title=\"传统模式\"></a>传统模式</h4></li>\n</ol>\n<ul>\n<li>有 Web 容器</li>\n</ul>\n<p><img src=\"/../images/Web.png\" alt=\"有Web容器开发模型\"></p>\n<ol start=\"2\">\n<li><h4 id=\"Node-js-开发-Web-应用程序\"><a href=\"#Node-js-开发-Web-应用程序\" class=\"headerlink\" title=\"Node.js 开发 Web 应用程序\"></a>Node.js 开发 Web 应用程序</h4></li>\n</ol>\n<ul>\n<li>没有 Web 容器</li>\n</ul>\n<p><img src=\"/../images/nodejs10.png\" alt=\"没有Web容器开发模型\"></p>\n<h2 id=\"在-node-js-上编写程序\"><a href=\"#在-node-js-上编写程序\" class=\"headerlink\" title=\"在 node.js 上编写程序\"></a>在 node.js 上编写程序</h2><h3 id=\"REPL-介绍\"><a href=\"#REPL-介绍\" class=\"headerlink\" title=\"REPL 介绍\"></a>REPL 介绍</h3><ol>\n<li>REPL 全称: Read-Eval-Print-Loop(交互式解释器)</li>\n</ol>\n<ul>\n<li>R 读取 - 读取用户输入，解析输入了 Javascript 数据结构并存储在内存中。</li>\n<li>E 执行 - 执行输入的数据结构</li>\n<li>P 打印 - 输出结果</li>\n<li>L 循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。</li>\n</ul>\n<ol start=\"2\">\n<li>在 REPL 中编写程序 (类似于浏览器开发人员工具中的控制台功能)</li>\n</ol>\n<ul>\n<li>直接在控制台输入 node 命令进入 REPL 环境</li>\n</ul>\n<ol start=\"3\">\n<li>按两次 Control + C 退出 REPL 界面 或者 输入 .exit 退出 REPL 界面</li>\n</ol>\n<ul>\n<li>按住 control 键不要放开, 然后按两下 c 键</li>\n</ul>\n<h3 id=\"创建-JavaScript-文件编写程序\"><a href=\"#创建-JavaScript-文件编写程序\" class=\"headerlink\" title=\"创建 JavaScript 文件编写程序\"></a>创建 JavaScript 文件编写程序</h3><h4 id=\"JavaScript-文件名命名规则\"><a href=\"#JavaScript-文件名命名规则\" class=\"headerlink\" title=\"JavaScript 文件名命名规则\"></a>JavaScript 文件名命名规则</h4><ul>\n<li>不要用中文</li>\n<li>不要包含空格</li>\n<li>不要出现 node 关键字，比如：node.js</li>\n<li>建议以 ‘-’ 分割单词</li>\n</ul>\n<h3 id=\"案例-1：编写一个简单的函数-实现数字相加\"><a href=\"#案例-1：编写一个简单的函数-实现数字相加\" class=\"headerlink\" title=\"案例 1：编写一个简单的函数, 实现数字相加\"></a>案例 1：编写一个简单的函数, 实现数字相加</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-number\">100</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x, y</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> x + y;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-title function_\">add</span>(m, n);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;计算结果是：&quot;</span> + result);<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"案例-2：文件读写案例\"><a href=\"#案例-2：文件读写案例\" class=\"headerlink\" title=\"案例 2：文件读写案例\"></a>案例 2：文件读写案例</h3>","categories":["后端"],"tags":["NodeJs"]},{"title":"TypeScript-学习","url":"/2023/06/19/TypeScript-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"浅谈-JavaScript\">浅谈 JavaScript</h2>\n<h3 id=\"JavaScript-是一门优秀的编程语言吗？\">JavaScript 是一门优秀的编程语言吗？</h3>\n<p>每个人可能观点并不完全一致，但是从很多角度来看，JavaScript 是一门非常优秀的编程语言；<br>\n而且，可以说在很长一段时间内这个语言不会被代替，并且会在更多的领域被大家广泛使用；</p>\n<h3 id=\"著名的-Atwood-定律：\">著名的 Atwood 定律：</h3>\n<p>Stack Overflow 的创立者之一的 Jeff Atwood 在 2007 年提出了著名的 Atwood 定律。</p>\n<p>any application that can be written in JavaScript, will eventually be written in JavaScript.</p>\n<p>任何可以使用 JavaScript 来实现的应用都最终都会使用 JavaScript 实现。</p>\n<p>其实我们已经看到了，这句话正在一步步被应验：</p>\n<ul>\n<li>Web 端的开发我们一直都是使用 JavaScript；</li>\n<li>移动端开发可以借助于 ReactNative、Weex、Uniapp 等框架实现跨平台开发；</li>\n<li>小程序端的开发也是离不开 JavaScript；</li>\n<li>桌面端应用程序我们可以借助于 Electron 来开发；</li>\n<li>服务器端开发可以借助于 Node 环境使用 JavaScript 来开发。</li>\n</ul>\n<h3 id=\"JavaScript-的痛点\">JavaScript 的痛点</h3>\n<p>并且随着近几年前端领域的快速发展，让 JavaScript 迅速被普及和受广大开发者的喜爱，借助于 JavaScript 本身的 强大，也让使用 JavaScript 开发的人员越来越多。</p>\n<h3 id=\"优秀的-JavaScript-没有缺点吗？\">优秀的 JavaScript 没有缺点吗？</h3>\n<p>其实上由于各种历史因素，JavaScript 语言本身存在很多的缺点；</p>\n<p>比如 ES5 以及之前的使用的 var 关键字关于作用域的问题；</p>\n<p>比如最初 JavaScript 设计的数组类型并不是连续的内存空间；</p>\n<p>比如直到今天 JavaScript 也没有加入类型检测这一机制；</p>\n<h3 id=\"JavaScript-正在慢慢变好\">JavaScript 正在慢慢变好</h3>\n<p>不可否认的是，JavaScript 正在慢慢变得越来越好，无论是从底层设计还是应用层面。</p>\n<p>ES6、7、8 等的推出，每次都会让这门语言更加现代、更加安全、更加方便。</p>\n<p>但是知道今天，JavaScript 在类型检测上依然是毫无进展（为什么类型检测如此重要，我后面会聊到）。</p>\n<h3 id=\"类型带来的问题\">类型带来的问题</h3>\n<p>首先你需要知道，编程开发中我们有一个共识：<strong>错误出现的越早越好</strong></p>\n","categories":["前端"],"tags":["TypeScript"]},{"title":"React 学习","url":"/2023/06/08/React-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"React-简介\">React 简介</h2>\n<h3 id=\"一、什么是-React-？-What-is-React？\">一、什么是 React ？(What is React？)</h3>\n<blockquote>\n<p>React是一个声明式的，高效的，并且灵活的用于构建用户界面的 JavaScript 库。它允许您使用”components(组件)“（小巧而独立的代码片段）组合出各种复杂的UI。</p>\n</blockquote>\n<h3 id=\"二、React谁开发的？\">二、React谁开发的？</h3>\n<blockquote>\n<p>由Facebook开发且开源，近十年“陈酿”，阿里等大厂开始使用</p>\n</blockquote>\n<h3 id=\"三、为什么要学？\">三、为什么要学？</h3>\n<h4 id=\"一-原生js痛点\"> (一)原生js痛点</h4>\n<ol>\n<li>原生JavaScript操作DOM繁琐、效率低（DOM-API操作UI）</li>\n</ol>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;app&#x27;</span>)<br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>)<br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;span&#x27;</span>)<br></code></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"2\">\n<li>\n<p>使用JavaScript直接操作DOM，浏览器会进行大量的重绘重排</p>\n</li>\n<li>\n<p>原生JavaScript没有组件化（模块化）编码方案，代码复用率低</p>\n</li>\n</ol>\n<h4 id=\"二-React特点\">(二)React特点</h4>\n<ol>\n<li>\n<p>采用组件化模式，声明式编码，提高开发效率和组件复用率</p>\n</li>\n<li>\n<p>在React Native中可以用React语法进行移动端开发</p>\n</li>\n<li>\n<p>使用虚拟DOM和优秀的Diffing算法，尽量减少与真实DOM的交互，提高性能</p>\n</li>\n</ol>\n<h3 id=\"四、React依赖介绍？\">四、React依赖介绍？</h3>\n","categories":["前端"],"tags":["React"]},{"title":"Vue2 学习","url":"/2023/06/09/Vue2-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"Vue-简介\">Vue 简介</h2>\n<p>Vue 是一套用于构建用户界面的 渐进式框架 。</p>\n<p>与其它大型框架不同的是，Vue 采用自底向上增量开发的设计。</p>\n<p>Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。</p>\n<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>\n<p>最初它不过是个人项目，时至今日，已成为全世界三大前端框架之一，github 上拥有 19.8万 Star。 领先于 React 和 Angular，在国内更是首选。</p>\n","categories":["前端"],"tags":["Vue"]},{"title":"Vue3 学习","url":"/2023/06/09/Vue3-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"Vue3-简介\"><a href=\"#Vue3-简介\" class=\"headerlink\" title=\"Vue3 简介\"></a>Vue3 简介</h2><p><img src=\"/../images/v3_1.png\" alt=\"v3\"></p>\n<ul>\n<li><p>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece(海贼王)</p>\n</li>\n<li><p>耗时 2 年多、2600+次提交、30+个 RFC、600+次 PR、99 位贡献者</p>\n</li>\n<li><p>github 上的 tags 地址：<a href=\"https://github.com/vuejs/vue-next/releases/tag/v3.0.0\">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></p>\n</li>\n</ul>\n<h2 id=\"Vue3-带来了什么\"><a href=\"#Vue3-带来了什么\" class=\"headerlink\" title=\"Vue3 带来了什么\"></a>Vue3 带来了什么</h2><ol>\n<li><p>性能的提升</p>\n<ul>\n<li>打包大小减少41%</li>\n<li>初次渲染快 55%, 更新渲染快 133%</li>\n<li>内存减少 54%</li>\n</ul>\n</li>\n<li><p>源码的升级</p>\n<ul>\n<li>使用 Proxy 代替 defineProperty 实现响应式</li>\n<li>重写虚拟 DOM 的实现和 Tree-Shaking</li>\n</ul>\n</li>\n<li><p>拥抱 TypeScript</p>\n<ul>\n<li>Vue3 可以更好的支持 TypeScript</li>\n</ul>\n</li>\n<li><p>新的特性</p>\n<ol>\n<li><p>Composition API(组合 API)</p>\n<ul>\n<li>setup 配置</li>\n<li>ref 与 reactive</li>\n<li>watch 与 watchEffect</li>\n<li>provide 与 inject</li>\n<li>···</li>\n</ul>\n</li>\n<li><p>新的内置组件</p>\n<ul>\n<li>Fragment</li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li><p>其他改变</p>\n<ul>\n<li>新的生命周期钩子</li>\n<li>data 选项应始终被声明为一个函数</li>\n<li>移除 keyCode 支持作为 v-on 的修饰符</li>\n<li>···</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"创建-vue3-项目\"><a href=\"#创建-vue3-项目\" class=\"headerlink\" title=\"创建 vue3 项目\"></a>创建 vue3 项目</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">## 查看@vue/cli版本，确保@vue/cli版本在<span class=\"hljs-number\">4.5</span><span class=\"hljs-number\">.0</span>以上<br>vue --version<br>## 安装或者升级你的@vue/cli<br>npm install -g @vue/cli<br>## 创建<br>vue create vue3_study<br>## 启动<br>cd vue3_study<br>npm run serve<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"Options-API-的弊端\"><a href=\"#Options-API-的弊端\" class=\"headerlink\" title=\"Options API 的弊端\"></a>Options API 的弊端</h2><p>在 Vue2 中，我们编写组件的方式是 OptionsAPI：</p>\n<p>Options API 的一大特点就是在对应的属性中编写对应的功能模块；</p>\n<p>比如 data 定义数据、methods 中定义方法、computed 中定义计算属性、watch 中监听属性改变，也包括生命 周期钩子;</p>\n<p><strong>但是这种代码有一个很大的弊端:</strong></p>\n<p>当我们实现某一个功能时，这个功能对应的代码逻辑会被拆分到各个属性中；</p>\n<p>当我们组件变得更大、更复杂时，逻辑关注点的列表就会增长，那么同一个功能的逻辑就会被拆分的很分散；</p>\n<p>尤其对于那些一开始没有编写这些组件的人来说，这个组件的代码是难以阅读和理解的（阅读组件的其他人）；</p>\n<p><strong>下面我们来看一个非常大的组件，其中的逻辑功能按照颜色进行了划分:</strong></p>\n<p>这种碎片化的代码使用理解和维护这个复杂的组件变得异常困难，并且隐藏了潜在的逻辑问题；</p>\n<p>并且当我们处理单个逻辑关注点时，需要不断的跳到相应的代码块中;</p>\n<table>\n<thead>\n<tr>\n<th>OptionsAPI</th>\n<th>Composition API</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"/../images/v3_2.png\" alt=\"OptionsAPI\"></td>\n<td><img src=\"/../images/v3_3.png\" alt=\"Composition API\"></td>\n</tr>\n</tbody></table>\n<p>如果我们能将同一个逻辑关注 点相关的代码收集在一起会更好。</p>\n<p>这就是<strong>Composition API</strong>想要做的事情，以及可以帮助我 们完成的事情。</p>\n<p>也有人把 Vue Composition API 简称为<strong>VCA</strong>。</p>\n<h2 id=\"认识-Composition-API\"><a href=\"#认识-Composition-API\" class=\"headerlink\" title=\"认识 Composition API\"></a>认识 Composition API</h2><p>那么既然知道 Composition API 想要帮助我们做什么事情，接下来看一下<strong>到底是怎么做</strong>呢？</p>\n<p>为了开始使用 Composition API，我们需要有一个可以实际使用它（编写代码）的地方；</p>\n<p>在 Vue 组件中，这个位置就是 setup 函数；</p>\n<p><strong>setup</strong>其实就是组件的另外一个选项：</p>\n<p>只不过这个选项强大到我们可以用它来替代之前所编写的大部分其他选项；</p>\n<p>比如 methods、computed、watch、data、生命周期等等；</p>\n<p><strong>接下来我们一起学习这个函数的使用:</strong></p>\n<p>函数的参数</p>\n<p>函数的返回值</p>\n<h3 id=\"setup-函数的参数\"><a href=\"#setup-函数的参数\" class=\"headerlink\" title=\"setup 函数的参数\"></a>setup 函数的参数</h3><p>我们先来研究一个 setup 函数的参数，它主要有<strong>两个参数:</strong></p>\n<p>第一个参数：props</p>\n<p>第二个参数：context</p>\n<p>props 非常好理解，它其实就是<strong>父组件传递过来的属性</strong>会被放到 props 对象中，我们在<strong>setup 中如果需要使用</strong>,那么就可以直接通过 props 参数获取:</p>\n<p>对于定义 props 的类型，我们还是和之前的规则是一样的，在 props 选项中定义;</p>\n<p>并且在 template 中依然是可以正常去使用 props 中的属性，比如 message;</p>\n<p>如果我们在 setup 函数中想要使用 props，那么不可以通过 this 去获取（后面我会讲到为什么）;</p>\n<p>因为 props 有直接作为参数传递到 setup 函数中，所以我们可以直接通过参数来使用即可;</p>\n<p>另外一个参数是<strong>context</strong>,我们也称之为是一个<strong>SetupContext</strong>,它里面包含<strong>三个属性:</strong></p>\n<ul>\n<li><strong>attrs：</strong>所有的非 prop 的 attribute;</li>\n<li><strong>slots：</strong>父组件传递过来的插槽(这个在以渲染函数返回时会有作用，后面会讲到);</li>\n<li><strong>emit：</strong>当我们组件内部需要发出事件时会用到 emit（因为我们不能访问 this，所以不可以通过 this.$emit 发出事件）；</li>\n</ul>\n<h3 id=\"setup-函数的返回值\"><a href=\"#setup-函数的返回值\" class=\"headerlink\" title=\"setup 函数的返回值\"></a>setup 函数的返回值</h3><ol>\n<li><strong>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</strong></li>\n<li>若返回一个渲染函数：则可以自定义渲染内容。（了解）</li>\n</ol>\n<p><strong>注意点：</strong></p>\n<ol>\n<li><p>尽量不要与 Vue2.x 配置混用</p>\n<ul>\n<li>Vue2.x 配置（data、methos、computed…）中可以访问到 setup 中的属性、方法。</li>\n<li>但在 setup 中不能访问到 Vue2.x 配置（data、methos、computed…）。</li>\n<li>如果有重名, setup 优先。</li>\n</ul>\n</li>\n<li><p>setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）</p>\n</li>\n</ol>\n<h3 id=\"另外注意：setup-不可以使用-this\"><a href=\"#另外注意：setup-不可以使用-this\" class=\"headerlink\" title=\"另外注意：setup 不可以使用 this\"></a>另外注意：setup 不可以使用 this</h3>","categories":["前端"],"tags":["Vue"]},{"title":"Hello World","url":"/2023/05/24/hello-world/","content":"<h2 id=\"“永远不要失去浪漫的能力”。\">“永远不要失去浪漫的能力”。</h2>\n<p>​这个浪漫不单单是指恋爱，更多的是：</p>\n<p>对于世界的好奇和探索，阅读和书写，天真的想法和骨子里的善良，</p>\n<p>对于生活必要的仪式感，以及拥有对恶意和黑暗的事物抱有愤怒和反抗的能力 ~</p>\n<p>和这个世界交手多年，渐渐失去了一些耐心，身体劳累，精神也麻木，对什么都提不起兴趣，</p>\n<p>把漫长的生命活成同一天，但这样不行，早晚有一天是要发疯的 ~</p>\n<p>还是要一些坚守和浪漫，要一些别人看来非必要的事物来拯救自己 ~</p>\n<p>要一些海风，夏天的雨，要低吟的音乐和沉浸的电影，要在心里点燃一盏烛火 ~</p>\n<p>停止被这个世界融化，花一些时间在这些事物上，</p>\n<p>凝成自己坚固的核，保护好自己闪闪发光的部分，哪怕只是徒劳 ~</p>\n<p>觉得难过的时候，记得抬头看看月亮 ~</p>\n"},{"title":"小程序 学习","url":"/2023/06/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"浅谈小程序\"><a href=\"#浅谈小程序\" class=\"headerlink\" title=\"浅谈小程序\"></a>浅谈小程序</h2><p>  在 2016 年的「微信公开课 Pro」演讲中，微信事业群总裁张小龙这样描述了小程序的前景与未来：</p>\n<blockquote>\n<p>“ 小程序是一种不需要下载安装即可使用的应用，它实现了应用 “触手可及” 的梦想，用户扫一扫或者搜一下即可打开应用。也体现了 “用完即走” 的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无须安装卸载 “。</p>\n</blockquote>\n<p>  小程序刚发布的时候要求压缩包的体积不能大于 1M，否则无法通过，在 2017 年 4 月做 了改进，由原来的 1M 提升到 2M；</p>\n<p>  2017 年 1 月 9 日 0 点，万众瞩目的微信第一批小程序正式低调上线。</p>\n<p>  而在 2020年的「WWDC 苹果全球开发者大会」中，轻应用则被作为 iOS 14 的主要功能进行强调与推介：</p>\n<p>  <img src=\"/../images/wx1.png\" alt=\"你好\"></p>\n<blockquote>\n<p>App Clip 就是一种无需用户在 iPhone 或 iPad 上安装完整的应用程序，就可以访问使用该应用程序的部分功能的轻量级应用，它们专注于处理简单快速的任务。</p>\n</blockquote>\n<p>不论是张小龙对「微信小程序」略带文艺的描述，还是在 WWDC 上对于「轻应用」在 iOS 生态中的地位描述，我们都能大抵能理解小程序诞生的初衷。而如果我们把时间从这两场发布会的转至今日，却会发现小程序早已不再局限于「用完即走」与「快速打开」，各式各样的小程序已呈现百花齐放的状态，不论是工具小程序，内容小程序，交易小程序，直播小程序，各种类型应有尽有。</p>\n<p>不妨让我尝试用自己的工作日常举例，早上出门上班，我会打开「天府健康通」扫描地铁场所码，并把健康码给地铁安检查看，临近中午 11 点 30 分，我会用「美团」或「饿了么」为自己订一份工作餐，吃完午饭后我会打开「动物餐厅」看看小猫咪又赚了多少小鱼干，下午会议时使用「腾讯文档」查看会议纪要，快下班的时候用「叮咚买菜」购置晚饭所需的食材，晚上回家做饭时，用「懒饭 App」看看想吃的番茄肥牛饭怎么做。</p>\n<p><img src=\"/../images/wx2.png\" alt=\"你好\"></p>\n<p>时至今日，当我们说到小程序时，也不仅仅在特指微信小程序，各式各样的平台都纷纷推出了自己专属的小程序平台，不论支付宝、字节跳动、美团还是百度等其他互联网大厂，都纷纷推出了自己专属的小程序平台，且都基于自己的生态业务，为小程序提供流量进行支持，希望用户与开发者能够选择自有平台中的小程序进行开发。</p>\n<p>随着小程序业务的愈演愈烈，越来越多的流量都被引入了互联网巨头的小程序战场中，但在这个过程中，对于战场中「封闭，不透明」的吐槽与争议也逐渐出现，无数企业都希望自己的应用中也能具备运行小程序的能力，希望能够借此抗争小程序被引入寡头所控制的战场，但「知易行难」，快速完成对小程序的底层与容器的研发，所需要花费的精力与时间并不是短时间就能够完成的。</p>\n<p>事实上，小程序可以被理解为是「移动应用 App」的一个细分子集，如果按照「平等透明」的设想，小程序不应该仅仅存在于微信之中，那些我们并不经常使用的应用都可以通过小程序进行重新优化，我们可以通过各式各样的专门应用打开相关的小程序，从而对那些「太重的应用」进行减负操作。</p>\n<p>当然了，小程序还会有这样一些特性需要我们注意：</p>\n<ul>\n<li><p>小程序不具备「被关注」的能力，获取流量留存用户的操作需要由独立应用或其他渠道完成;</p>\n</li>\n<li><p>小程序不具备「推送消息与群发消息」的能力，对用户的信息触达与消息传递的操作需要由其他渠道完成;</p>\n</li>\n<li><p>小程序不具备「跨 App 分享 」的能力，因此对于小程序的分享与打开路径，需要在设计产品时提前思考，而不是把鸡蛋放在一个篮子里;</p>\n</li>\n</ul>\n<h3 id=\"什么样的应用适合使用小程序开发\"><a href=\"#什么样的应用适合使用小程序开发\" class=\"headerlink\" title=\"什么样的应用适合使用小程序开发\"></a>什么样的应用适合使用小程序开发</h3><p>虽然小程序市场时至今日依然是一片蓝海，但我想也不是所有应用「都可以，都应该」使用小程序开发的。</p>\n<p>基于我们的经验与积累来说，符合「逻辑简单，使用低频，对性能要求不极致」的应用场景，更加适合使用小程序进行研发。</p>\n<h4 id=\"逻辑简单：\"><a href=\"#逻辑简单：\" class=\"headerlink\" title=\"逻辑简单：\"></a>逻辑简单：</h4><p>是指应用的操作逻辑并不十分复杂，各类生活服务（如打车，订餐，查地图与导航等等）都需要给用户提供简单清晰的操作逻辑，而这一类也天然的符合起初小程序「用完即走」的定义，因此十分符合使用小程序研发。一些逻辑复杂的应用场景想要通过小程序进行适配，就可能会面临更多的设计与研发困难，同时在性能和体验也可能会面对更多需要解决的问题。</p>\n<h4 id=\"使用低频：\"><a href=\"#使用低频：\" class=\"headerlink\" title=\"使用低频：\"></a>使用低频：</h4><p>是指小程序的使用频率不应该太高，比如社交类的钉钉或飞书，金融类的掌上生活或浦大喜奔，媒体类的网易云音乐或斗鱼都不太适合使用小程序进行重新设计。对于用户使用的频率较高的应用来说，直接打开应用进行体验的步骤肯定最快的，此外由于某些行业的特殊性质（比如具备交易，支付等能力）要求，对于安全性与保密性的首选风险判断原则，也不宜使用常见的小程序进行设计。</p>\n<h4 id=\"对性能要求不极致：\"><a href=\"#对性能要求不极致：\" class=\"headerlink\" title=\"对性能要求不极致：\"></a>对性能要求不极致：</h4><p>是指由于小程序始终存在于某个独立应用（也被称为宿主应用）中，考虑到目前的性能与研发所限制，暂时不太适合开发对于这两者有更高要求的移动应用。比如把原神，王者荣耀这样的游戏应用通过小程序进行重新设计，在目前来说肯定是不现实的。</p>\n<p>当然，随着相关研发实力的增强与产业生态的逐渐补充，也有越来越多的「不可能」变为了「可能」，比如华西证券的「华彩人生」，浦发银行的「浦大喜奔」，某省的移动警务平台等客户都选择使用小程序容器方案进行落地实现</p>\n<h3 id=\"小程序与-H5，原生应用有何区别？\"><a href=\"#小程序与-H5，原生应用有何区别？\" class=\"headerlink\" title=\"小程序与 H5，原生应用有何区别？\"></a>小程序与 H5，原生应用有何区别？</h3><p>很多朋友在了解小程序技术的时候，都会有这样的疑惑“到底与 H5，原生应用”这些技术相比，小程序具有哪些优势与劣势呢？</p>\n<h4 id=\"H5-移动应用\"><a href=\"#H5-移动应用\" class=\"headerlink\" title=\"H5 移动应用\"></a>H5 移动应用</h4><p>我们常说的 H5 其实也通常可以被视为一种 Web App，相比于我们在桌面端浏览器中打开的网页，主要是增加了一些响应式的设计与交互优化，从而使得这些网页更适合在移动端的浏览器中显示运行。既然是网页应用，那依然是基于 JavaScript，CSS 和 HTML 进行实现的，由于是基于各类前端技术栈进行实现，最大的好处就是快速、简单、方便，且有各种技术资料可以参考。</p>\n<p>同样，H5 的缺点与优点也是并存的，比如由于技术已经很成熟了，对于前端经验欠缺的新人来说，面对各式各样的框架，模块、任务管理工具，UI 库可能会出现无从下手的问题；此外相比于原生应用，对于系统权限的获取（比如数据缓存能力，网络通信状态等）都显得比较鸡肋，当低性能的设备加载包含复杂逻辑的页面时，会出现明显的卡顿与延迟问题。</p>\n<h4 id=\"原生应用\"><a href=\"#原生应用\" class=\"headerlink\" title=\"原生应用\"></a>原生应用</h4><p>原生应用也被叫做 Native App，相比于 H5 应用通过前端三大件进行实现不同，原生应用主要会采用 iOS 与 Android 的专有语言 Object-C（或 Swift），Java（或 Kotlin）进行实现，大多我们所常见的国民应用，比如微信，支付宝等都属于这种原生应用。</p>\n<p>既然被叫做「原生应用」，就像操作系统的亲儿子一样，天然在性能与体验上具备优秀的潜质，也有组件库丰富，接口支持完善等各种优势特点。但原生应用最大的缺陷就是不能跨平台研发，以目前的主流市场为例，必须要支持 iOS 与 Android 两个主流平台。</p>\n<h4 id=\"混合应用\"><a href=\"#混合应用\" class=\"headerlink\" title=\"混合应用\"></a>混合应用</h4><p>混合应用一般被称为 Hybrid App。简单来说，混合应用就是将原生功能封装成对应的 JS 接口，在前端使用 H5 来开发对应的 App （即 H5 作为内容+原生应用作为壳） ，看上去虽然是一个移动原生应用整体，但实际的页面还是网页，一套代码可以生成 iOS 与 Android 两种安装包，开发成本较低。</p>\n<p>我们常见的淘宝，京东等应用由于更新与优化节奏都十分快速，为了更好的响应「贴近用户」的目标，应用中有的功能通过原生 Native 实现，有的功能则通过 H5 页面进行实现，这种应用就属于我们所说的混合应用。</p>\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><p>严格意义上来说，小程序并不属于以上 3 种应用的任何一种。小程序主要通过 JavaScript 与 CSS 这种常见的前端技术进行开发，但又没有完全使用 HTML 进行实现，在不同的操作系统中，JavaScript 代码分别运行在 iOS 的 JavaScriptCore 与 Android 的 X5 JSCore 中，各家小程序平台或多或少都有一部分自研的核心，因此渲染视图层的组件也有所不同。</p>\n<p><img src=\"/../images/wx3.png\" alt=\"你好\"></p>\n<p>相比「 H5 移动应用」与「 移动原生应用」，小程序具备如下优势：</p>\n","categories":["前端"],"tags":["微信小程序"]},{"title":"uniapp-学习","url":"/2023/06/12/uniapp-%E5%AD%A6%E4%B9%A0/","content":"<p>待更新~</p>\n","categories":["前端"],"tags":["uniApp"]}]