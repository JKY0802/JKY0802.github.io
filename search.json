[{"title":"NodeJs 学习","url":"/2023/06/08/NodeJs-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"node-js-介绍\"><a href=\"#node-js-介绍\" class=\"headerlink\" title=\"node.js 介绍\"></a>node.js 介绍</h2><h3 id=\"node-js-是什么？\"><a href=\"#node-js-是什么？\" class=\"headerlink\" title=\"node.js 是什么？\"></a>node.js 是什么？</h3><ol>\n<li>node.js 是一个开发平台，就像Java开发平台、.Net开发平台、PHP开发平台、Apple开发平台一样。</li>\n</ol>\n<ul>\n<li>何为开发平台？有对应的编程语言、有语言运行时、有能实现特定功能的API(SDK：Software Development Kit)</li>\n</ul>\n<ol start=\"2\">\n<li>nodejs平台使用的编程语言是 JavaScript 语言。</li>\n</ol>\n<ul>\n<li>不支持 window、document、bom 对象。</li>\n</ul>\n<ol start=\"3\">\n<li><p>node.js平台是基于 Chrome V8 JavaScript 引擎构建。</p>\n</li>\n<li><p>基于 node.js 可以开发控制台程序(命令行程序、CLI程序)、桌面应用程序(GUI)(借助 node-webkit、electron 等框架实现)、Web 应用程序(网站)。</p>\n</li>\n</ol>\n<blockquote>\n<p>PHP开发技术栈: LAMP - Linux Apache MySQL PHP<br>node.js 全栈开发技术栈: MEAN - MongoDB Express Angular Node.js</p>\n</blockquote>\n<h3 id=\"node-js-有哪些特点？\"><a href=\"#node-js-有哪些特点？\" class=\"headerlink\" title=\"node.js 有哪些特点？\"></a>node.js 有哪些特点？</h3><ol>\n<li>事件驱动(当事件被触发时，执行传递过去的回调函数)</li>\n<li>非阻塞 I&#x2F;O 模型(当执行I&#x2F;O操作时，不会阻塞线程)</li>\n<li>单线程</li>\n<li>拥有世界最大的开源库生态系统 —— npm。</li>\n</ol>\n<h3 id=\"node-js-网站\"><a href=\"#node-js-网站\" class=\"headerlink\" title=\"node.js 网站\"></a>node.js 网站</h3><ol>\n<li><a href=\"https://nodejs.org/en\">node.js官方网站</a></li>\n<li><a href=\"https://nodejs.cn/\">node.js中文网</a></li>\n<li><a href=\"https://cnodejs.org/\">node.js中文社区</a></li>\n</ol>\n<h3 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h3><ol>\n<li>了解服务器开发过程</li>\n<li>会使用 node.js 开发基本的 http 服务程序(Web应用程序)</li>\n</ol>\n<h3 id=\"Node-js可以用来做什么？\"><a href=\"#Node-js可以用来做什么？\" class=\"headerlink\" title=\"Node.js可以用来做什么？\"></a>Node.js可以用来做什么？</h3><ul>\n<li>具有复杂逻辑的动态网站</li>\n<li>WebSocket服务器</li>\n<li>命令行工具</li>\n<li>带有图形界面的本地应用程序</li>\n<li>···</li>\n</ul>\n<h2 id=\"终端基本使用\"><a href=\"#终端基本使用\" class=\"headerlink\" title=\"终端基本使用\"></a>终端基本使用</h2><h3 id=\"打开应用\"><a href=\"#打开应用\" class=\"headerlink\" title=\"打开应用\"></a>打开应用</h3><ul>\n<li>notepad 打开记事本</li>\n<li>mspaint 打开画图</li>\n<li>calc 打开计算机</li>\n<li>write 打开写字板</li>\n<li>sysdm.cpl 打开环境变量设置窗口</li>\n</ul>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li>md 创建目录</li>\n<li>rmdir(rd) 删除目录，目录内没有文档</li>\n<li>echo on a.txt 创建空文件</li>\n<li>del 删除文件</li>\n<li>rm 文件名 删除文件</li>\n</ul>\n<h3 id=\"Node-js开发环境准备\"><a href=\"#Node-js开发环境准备\" class=\"headerlink\" title=\"Node.js开发环境准备\"></a>Node.js开发环境准备</h3><ol>\n<li><p>普通安装方式<a href=\"https://nodejs.org/zh-cn\">官方网站</a></p>\n</li>\n<li><p>多版本安装方式</p>\n</li>\n</ol>\n<ul>\n<li>卸载已有的Node.js</li>\n<li>下载nvm</li>\n<li>在C盘创建目录dev</li>\n<li>在dev目中中创建两个子目录nvm和nodejs</li>\n<li>并且把nvm包解压进去nvm目录中</li>\n<li>在install.cmd文件上面右键选择【以管理员身份运行】</li>\n<li>打开的cmd窗口直接回车会生成一个settings.txt文件，修改文件中配置信息</li>\n<li>配置nvm和Node.js环境变量</li>\n</ul>\n<blockquote>\n<p>NVM_HOME:C:\\dev\\nvm<br>NVM_SYMLINK:C:\\dev\\nodejs</p>\n</blockquote>\n<ul>\n<li>把配置好的两个环境变量加到Path中</li>\n</ul>\n<h3 id=\"nvm常用的命令\"><a href=\"#nvm常用的命令\" class=\"headerlink\" title=\"nvm常用的命令\"></a>nvm常用的命令</h3><ul>\n<li>nvm list 查看当前安装的Node.js所有版本</li>\n<li>nvm install 版本号 安装指定版本的Node.js</li>\n<li>nvm uninstall 版本号 卸载指定版本的Node.js</li>\n<li>nvm use 版本号 选择指定版本的Node.js</li>\n</ul>\n<h3 id=\"Node-js之HelloWorld\"><a href=\"#Node-js之HelloWorld\" class=\"headerlink\" title=\"Node.js之HelloWorld\"></a>Node.js之HelloWorld</h3><ul>\n<li>命令行方式REPL</li>\n<li>运行文件方式</li>\n<li>全局对象概览</li>\n</ul>\n<h3 id=\"Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net等传统模式开发Web应用程序区别\"><a href=\"#Node-js-开发-Web-应用程序-和-PHP、Java、ASP-Net等传统模式开发Web应用程序区别\" class=\"headerlink\" title=\"Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net等传统模式开发Web应用程序区别\"></a>Node.js 开发 Web 应用程序 和 PHP、Java、ASP.Net等传统模式开发Web应用程序区别</h3><ol>\n<li><h4 id=\"传统模式\"><a href=\"#传统模式\" class=\"headerlink\" title=\"传统模式\"></a>传统模式</h4></li>\n</ol>\n<ul>\n<li>有 Web 容器</li>\n</ul>\n<p><img src=\"/../images/Web.png\" alt=\"有Web容器开发模型\"></p>\n<ol start=\"2\">\n<li><h4 id=\"Node-js-开发-Web-应用程序\"><a href=\"#Node-js-开发-Web-应用程序\" class=\"headerlink\" title=\"Node.js 开发 Web 应用程序\"></a>Node.js 开发 Web 应用程序</h4></li>\n</ol>\n<ul>\n<li>没有 Web 容器</li>\n</ul>\n<p><img src=\"/../images/nodejs10.png\" alt=\"没有Web容器开发模型\"></p>\n<h2 id=\"在-node-js-上编写程序\"><a href=\"#在-node-js-上编写程序\" class=\"headerlink\" title=\"在 node.js 上编写程序\"></a>在 node.js 上编写程序</h2><h3 id=\"REPL-介绍\"><a href=\"#REPL-介绍\" class=\"headerlink\" title=\"REPL 介绍\"></a>REPL 介绍</h3><ol>\n<li>REPL 全称: Read-Eval-Print-Loop(交互式解释器)</li>\n</ol>\n<ul>\n<li>R 读取 - 读取用户输入，解析输入了 Javascript 数据结构并存储在内存中。</li>\n<li>E 执行 - 执行输入的数据结构</li>\n<li>P 打印 - 输出结果</li>\n<li>L 循环 - 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出。</li>\n</ul>\n<ol start=\"2\">\n<li>在 REPL 中编写程序 (类似于浏览器开发人员工具中的控制台功能)</li>\n</ol>\n<ul>\n<li>直接在控制台输入 node 命令进入 REPL 环境</li>\n</ul>\n<ol start=\"3\">\n<li>按两次 Control + C 退出 REPL 界面 或者 输入 .exit 退出 REPL 界面</li>\n</ol>\n<ul>\n<li>按住 control 键不要放开, 然后按两下 c 键</li>\n</ul>\n<h3 id=\"创建-JavaScript-文件编写程序\"><a href=\"#创建-JavaScript-文件编写程序\" class=\"headerlink\" title=\"创建 JavaScript 文件编写程序\"></a>创建 JavaScript 文件编写程序</h3><h4 id=\"JavaScript-文件名命名规则\"><a href=\"#JavaScript-文件名命名规则\" class=\"headerlink\" title=\"JavaScript 文件名命名规则\"></a>JavaScript 文件名命名规则</h4><ul>\n<li>不要用中文</li>\n<li>不要包含空格</li>\n<li>不要出现 node 关键字，比如：node.js</li>\n<li>建议以 ‘-’ 分割单词</li>\n</ul>\n<h3 id=\"案例-1：编写一个简单的函数-实现数字相加\"><a href=\"#案例-1：编写一个简单的函数-实现数字相加\" class=\"headerlink\" title=\"案例 1：编写一个简单的函数, 实现数字相加\"></a>案例 1：编写一个简单的函数, 实现数字相加</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> n = <span class=\"hljs-number\">10</span>;<br><span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-number\">100</span>;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x, y</span>) &#123;<br>  <span class=\"hljs-keyword\">return</span> x + y;<br>&#125;<br><br><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-title function_\">add</span>(m, n);<br><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;计算结果是：&quot;</span> + result);<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"案例-2：文件读写案例\"><a href=\"#案例-2：文件读写案例\" class=\"headerlink\" title=\"案例 2：文件读写案例\"></a>案例 2：文件读写案例</h3>","categories":["后端"],"tags":["NodeJs"]},{"title":"React 学习","url":"/2023/06/08/React-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"React-简介\"><a href=\"#React-简介\" class=\"headerlink\" title=\"React 简介\"></a>React 简介</h2><h3 id=\"一、什么是-React-？-What-is-React？\"><a href=\"#一、什么是-React-？-What-is-React？\" class=\"headerlink\" title=\"一、什么是 React ？(What is React？)\"></a>一、什么是 React ？(What is React？)</h3><blockquote>\n<p>React是一个声明式的，高效的，并且灵活的用于构建用户界面的 JavaScript 库。它允许您使用”components(组件)“（小巧而独立的代码片段）组合出各种复杂的UI。</p>\n</blockquote>\n<h3 id=\"二、React谁开发的？\"><a href=\"#二、React谁开发的？\" class=\"headerlink\" title=\"二、React谁开发的？\"></a>二、React谁开发的？</h3><blockquote>\n<p>由Facebook开发且开源，近十年“陈酿”，阿里等大厂开始使用</p>\n</blockquote>\n<h3 id=\"三、为什么要学？\"><a href=\"#三、为什么要学？\" class=\"headerlink\" title=\"三、为什么要学？\"></a>三、为什么要学？</h3><h4 id=\"amp-nbsp-一-原生js痛点\"><a href=\"#amp-nbsp-一-原生js痛点\" class=\"headerlink\" title=\"&amp;nbsp;(一)原生js痛点\"></a>&amp;nbsp;(一)原生js痛点</h4><ol>\n<li>原生JavaScript操作DOM繁琐、效率低（DOM-API操作UI）</li>\n</ol>\n<pre><code><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;app&#x27;</span>)<br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>)<br><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;span&#x27;</span>)<br></code></pre></td></tr></table></figure>\n</code></pre>\n<ol start=\"2\">\n<li><p>使用JavaScript直接操作DOM，浏览器会进行大量的重绘重排</p>\n</li>\n<li><p>原生JavaScript没有组件化（模块化）编码方案，代码复用率低</p>\n</li>\n</ol>\n<h4 id=\"二-React特点\"><a href=\"#二-React特点\" class=\"headerlink\" title=\"(二)React特点\"></a>(二)React特点</h4><ol>\n<li><p>采用组件化模式，声明式编码，提高开发效率和组件复用率</p>\n</li>\n<li><p>在React Native中可以用React语法进行移动端开发</p>\n</li>\n<li><p>使用虚拟DOM和优秀的Diffing算法，尽量减少与真实DOM的交互，提高性能</p>\n</li>\n</ol>\n<h3 id=\"四、React依赖介绍？\"><a href=\"#四、React依赖介绍？\" class=\"headerlink\" title=\"四、React依赖介绍？\"></a>四、React依赖介绍？</h3>","categories":["前端"],"tags":["React"]},{"title":"缘析-瑾瑜","url":"/2023/08/27/RH-%E5%B7%A5%E4%BD%9C%E9%9A%8F%E7%AC%94/","content":"<h2 id=\"BUG记录\"><a href=\"#BUG记录\" class=\"headerlink\" title=\"BUG记录\"></a>BUG记录</h2><h2 id=\"新知识\"><a href=\"#新知识\" class=\"headerlink\" title=\"新知识\"></a>新知识</h2><h3 id=\"H5调用安卓和IOS相机权限\"><a href=\"#H5调用安卓和IOS相机权限\" class=\"headerlink\" title=\"H5调用安卓和IOS相机权限\"></a>H5调用安卓和IOS相机权限</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">  <span class=\"hljs-keyword\">var</span> u = navigator.<span class=\"hljs-property\">userAgent</span>;<br>  <span class=\"hljs-keyword\">var</span> isAndroid = u.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&quot;Android&quot;</span>) &gt; -<span class=\"hljs-number\">1</span> || u.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&quot;Adr&quot;</span>) &gt; -<span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">//android终端</span><br>  <span class=\"hljs-keyword\">var</span> isiOS = !!u.<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/\\(i[^;]+;( U;)? CPU.+Mac OS X/</span>); <span class=\"hljs-comment\">//ios终端</span><br><br>  <span class=\"hljs-keyword\">if</span> (isAndroid) &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isShow</span> = <span class=\"hljs-literal\">true</span>;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">plus</span>.<span class=\"hljs-property\">android</span>, <span class=\"hljs-string\">&quot;安卓&quot;</span>);<br>  <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">plus</span>.<span class=\"hljs-property\">android</span>.<span class=\"hljs-title function_\">requestPermissions</span>(<br>    [<span class=\"hljs-string\">&quot;android.permission.CAMERA&quot;</span>],<br>    <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) &#123;<br>      <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">deniedAlways</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">//权限被永久拒绝</span><br>        <span class=\"hljs-comment\">// 弹出提示框解释为何需要权限，引导用户打开设置页面开启</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;权限被永久拒绝&quot;</span> + e.<span class=\"hljs-property\">deniedAlways</span>.<span class=\"hljs-title function_\">toString</span>());<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">deniedPresent</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">//权限被临时拒绝</span><br>        <span class=\"hljs-comment\">// 弹出提示框解释为何需要权限，可再次调用plus.android.requestPermissions申请权限</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;权限被临时拒绝&quot;</span> + e.<span class=\"hljs-property\">deniedPresent</span>.<span class=\"hljs-title function_\">toString</span>());<br>      &#125;<br>      <span class=\"hljs-keyword\">if</span> (e.<span class=\"hljs-property\">granted</span>.<span class=\"hljs-property\">length</span> &gt; <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-comment\">//权限被允许</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;权限被允许&quot;</span> + e.<span class=\"hljs-property\">granted</span>.<span class=\"hljs-title function_\">toString</span>());<br>        that.<span class=\"hljs-title function_\">openPay</span>();<br>      &#125;<br>    &#125;,<br>    <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Request Permissions error:&quot;</span> + <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(e));<br>    &#125;<br>  );<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">isShow</span> = <span class=\"hljs-literal\">false</span>;<br>  navigator.<span class=\"hljs-property\">mediaDevices</span><br>    .<span class=\"hljs-title function_\">getUserMedia</span>(&#123;<br>      <span class=\"hljs-attr\">video</span>: &#123;<br>        <span class=\"hljs-attr\">facingMode</span>: <span class=\"hljs-string\">&quot;environment&quot;</span>,<br>        <span class=\"hljs-attr\">width</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">height</span>,<br>        <span class=\"hljs-attr\">height</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">width</span>,<br>      &#125;,<br>    &#125;)<br>    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">stream</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;相机权限已授权&quot;</span>);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title class_\">QrScannerInit</span>();<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">scanQrCode</span>();<br>    &#125;)<br>    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;相机权限授权失败&quot;</span>, err);<br>      <span class=\"hljs-keyword\">if</span> (err.<span class=\"hljs-property\">name</span> === <span class=\"hljs-string\">&quot;NotAllowedError&quot;</span>) &#123;<br>        <span class=\"hljs-comment\">// 用户已禁止访问权限，引导用户更改权限设置</span><br>        <span class=\"hljs-comment\">// 显示提示信息，引导用户手动更改权限设置</span><br>        <span class=\"hljs-title class_\">Dialog</span>.<span class=\"hljs-title function_\">alert</span>(&#123;<br>          <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;提示&quot;</span>,<br>          <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&quot;您的相机功能好像有问题哦~去“设置&gt;隐私&gt;相机”开启一下吧&quot;</span>,<br>          <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-string\">&quot;round-button&quot;</span>,<br>        &#125;).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> &#123;<br>          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$router</span>.<span class=\"hljs-title function_\">push</span>(<br>            &#123;<br>              <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;/sweep&quot;</span>,<br>            &#125;,<br>            <span class=\"hljs-function\">() =&gt;</span> &#123;&#125;<br>          );<br>        &#125;);<br>      &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;其他错误&quot;</span>);<br>      &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"H5直接判断iOS相机权限\"><a href=\"#H5直接判断iOS相机权限\" class=\"headerlink\" title=\"H5直接判断iOS相机权限\"></a>H5直接判断iOS相机权限</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">AVCaptureDevice</span> = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">plus</span>.<span class=\"hljs-property\">ios</span>.<span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">&quot;AVCaptureDevice&quot;</span>);<br><span class=\"hljs-keyword\">var</span> authStatus = <span class=\"hljs-title class_\">AVCaptureDevice</span>.<span class=\"hljs-title function_\">authorizationStatusForMediaType</span>(<span class=\"hljs-string\">&quot;vide&quot;</span>);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;authStatus:&quot;</span> + authStatus);<br>  <span class=\"hljs-keyword\">if</span> (authStatus == <span class=\"hljs-number\">3</span>) &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;相机权限已经开启&quot;</span>);<br>  &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;相机权限没有开启&quot;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"H5获取-Android-MAC地址\"><a href=\"#H5获取-Android-MAC地址\" class=\"headerlink\" title=\"H5获取 Android MAC地址\"></a>H5获取 Android MAC地址</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// 导入Java类。Networklnterface类表示一个由名称和分配给此接口的IP地址列表组成的网络接口</span><br><span class=\"hljs-keyword\">const</span> net = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">plus</span>.<span class=\"hljs-property\">android</span>.importClass(<span class=\"hljs-string\">&quot;java.net.NetworkInterface&quot;</span>);<br><span class=\"hljs-comment\">// 搜索具有指定名称的网络接口</span><br><span class=\"hljs-keyword\">const</span> wlan0 = net.<span class=\"hljs-title function_\">getByName</span>(<span class=\"hljs-string\">&quot;wlan0&quot;</span>);<br><span class=\"hljs-comment\">// 获得网卡的硬件地址</span><br><span class=\"hljs-keyword\">const</span> macByte = wlan0.<span class=\"hljs-title function_\">getHardwareAddress</span>();<br><span class=\"hljs-keyword\">let</span> macStr = <span class=\"hljs-string\">&quot;&quot;</span>;<br><span class=\"hljs-comment\">//转换MAC地址的思路来自网上</span><br>macByte.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> &#123;<br>  <span class=\"hljs-comment\">// .toString(16)数字以十六进制值显示</span><br>  <span class=\"hljs-keyword\">let</span> temp = <span class=\"hljs-string\">&quot;&quot;</span>;<br>  <span class=\"hljs-keyword\">if</span> (item &lt; <span class=\"hljs-number\">0</span>) temp = (<span class=\"hljs-number\">256</span> + item).<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">16</span>);<br>  <span class=\"hljs-keyword\">else</span> temp = item.<span class=\"hljs-title function_\">toString</span>(<span class=\"hljs-number\">16</span>);<br>  <span class=\"hljs-keyword\">if</span> (temp.<span class=\"hljs-property\">length</span> == <span class=\"hljs-number\">1</span>) temp = <span class=\"hljs-string\">`0<span class=\"hljs-subst\">$&#123;temp&#125;</span>`</span>;<br>  macStr += temp;<br>&#125;);<br><span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable constant_\">MAC</span> = macStr.<span class=\"hljs-title function_\">toUpperCase</span>();<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &lt; <span class=\"hljs-variable constant_\">MAC</span>.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">3</span>)<br>  <span class=\"hljs-variable constant_\">MAC</span> = <span class=\"hljs-variable constant_\">MAC</span>.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>, i) + <span class=\"hljs-string\">&quot;:&quot;</span> + <span class=\"hljs-variable constant_\">MAC</span>.<span class=\"hljs-title function_\">slice</span>(i);<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;MAC: &quot;</span> + <span class=\"hljs-variable constant_\">MAC</span>);<br><span class=\"hljs-comment\">// this.macAdr = MAC;</span><br><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getIPAddresses</span>();<br><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">goToWallet</span>();<br></code></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"随机生成MAC地址\"><a href=\"#随机生成MAC地址\" class=\"headerlink\" title=\"随机生成MAC地址\"></a>随机生成MAC地址</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateMockMACAddress</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">const</span> characters = <span class=\"hljs-string\">&quot;0123456789ABCDEF&quot;</span>;<br>  <span class=\"hljs-keyword\">let</span> macAddress = <span class=\"hljs-string\">&quot;&quot;</span>;<br>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">6</span>; i++) &#123;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">2</span>; j++) &#123;<br>      macAddress += characters.<span class=\"hljs-title function_\">charAt</span>(<br>        <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * characters.<span class=\"hljs-property\">length</span>)<br>      );<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (i !== <span class=\"hljs-number\">5</span>) &#123;<br>      macAddress += <span class=\"hljs-string\">&quot;:&quot;</span>;<br>    &#125;<br>  &#125;<br>  <span class=\"hljs-keyword\">return</span> macAddress;<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> clientMACId = <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">getItem</span>(<span class=\"hljs-string\">&quot;clientMACId&quot;</span>);<br><br><span class=\"hljs-keyword\">if</span> (!clientMACId) &#123;<br>  clientMACId = <span class=\"hljs-title function_\">generateMockMACAddress</span>();<br>  <span class=\"hljs-variable language_\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&quot;clientMACId&quot;</span>, clientMACId);<br>&#125;<br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;clientMACId:&quot;</span>, clientMACId);<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"H5获取经纬度\"><a href=\"#H5获取经纬度\" class=\"headerlink\" title=\"H5获取经纬度\"></a>H5获取经纬度</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">getGps</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (navigator.<span class=\"hljs-property\">geolocation</span>) &#123;<br>    navigator.<span class=\"hljs-property\">geolocation</span>.<span class=\"hljs-title function_\">getCurrentPosition</span>(<br>      <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">position</span>) &#123;<br>        <span class=\"hljs-keyword\">var</span> latitude = position.<span class=\"hljs-property\">coords</span>.<span class=\"hljs-property\">latitude</span>;<br>        <span class=\"hljs-keyword\">var</span> longitude = position.<span class=\"hljs-property\">coords</span>.<span class=\"hljs-property\">longitude</span>;<br>      &#125;,<br>      <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error</span>) &#123;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Error occurred. Error code: &quot;</span> + error.<span class=\"hljs-property\">code</span>);<br>        <span class=\"hljs-title function_\">alert</span>(error);<br>      &#125;<br>    );<br>  &#125; <br>  <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Geolocation is not supported by this browser.&quot;</span>);<br>   &#125;<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"H5获取IP地址1-0\"><a href=\"#H5获取IP地址1-0\" class=\"headerlink\" title=\"H5获取IP地址1.0\"></a>H5获取IP地址1.0</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">getIP</span>(<span class=\"hljs-params\">callback</span>) &#123;<br>    <span class=\"hljs-keyword\">const</span> xhr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();<br>    xhr.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&quot;GET&quot;</span>, <span class=\"hljs-string\">&quot;https://api.ipify.org&quot;</span>, <span class=\"hljs-literal\">true</span>);<br>    xhr.<span class=\"hljs-property\">onreadystatechange</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-keyword\">if</span> (xhr.<span class=\"hljs-property\">readyState</span> === <span class=\"hljs-number\">4</span> &amp;&amp; xhr.<span class=\"hljs-property\">status</span> === <span class=\"hljs-number\">200</span>) &#123;<br>        <span class=\"hljs-title function_\">callback</span>(xhr.<span class=\"hljs-property\">responseText</span>);<br>      &#125;<br>    &#125;;<br>    xhr.<span class=\"hljs-title function_\">send</span>();<br>  &#125;<br><br>  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getIP</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">ip</span>) =&gt;</span> &#123;<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;Your IP&#x27;</span>,ip)<br>  &#125;);<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"H5获取IP地址2-0\"><a href=\"#H5获取IP地址2-0\" class=\"headerlink\" title=\"H5获取IP地址2.0\"></a>H5获取IP地址2.0</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title function_\">getIp2</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&quot;https://api.ipify.org?format=json&quot;</span>)<br>    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> response.<span class=\"hljs-title function_\">json</span>())<br>    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-keyword\">const</span> ip = data.<span class=\"hljs-property\">ip</span>;<br>      <span class=\"hljs-variable language_\">sessionStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&quot;clientIp&quot;</span>, ip);<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Your IP address is: &quot;</span> + ip);<br>      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">clientIp</span> = ip;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">clientIp</span>, <span class=\"hljs-string\">&quot;--------getIp2--------&quot;</span>);<br>    &#125;)<br>    .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> &#123;<br>      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Error occurred: &quot;</span> + error);<br>    &#125;);<br>  &#125;,<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"更多Android权限列表\"><a href=\"#更多Android权限列表\" class=\"headerlink\" title=\"更多Android权限列表\"></a>更多Android权限列表</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">权限 名称 描述<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">ACCESS_CHECKIN_PROPERTIES</span> 访问登记属性 读取或写入登记check-<span class=\"hljs-keyword\">in</span>数据库属性表的权限<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">ACCESS_COARSE_LOCATION</span> 获取错略位置 通过<span class=\"hljs-title class_\">WiFi</span>或移动基站的方式获取用户错略的经纬度信息,定位精度大概误差在<span class=\"hljs-number\">30</span>~<span class=\"hljs-number\">1500</span>米<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">ACCESS_FINE_LOCATION</span> 获取精确位置 通过<span class=\"hljs-variable constant_\">GPS</span>芯片接收卫星的定位信息,定位精度达<span class=\"hljs-number\">10</span>米以内<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">ACCESS_LOCATION_EXTRA_COMMANDS</span> 访问定位额外命令 允许程序访问额外的定位提供者指令<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">ACCESS_MOCK_LOCATION</span> 获取模拟定位信息 获取模拟定位信息,一般用于帮助开发者调试应用<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">ACCESS_NETWORK_STATE</span> 获取网络状态 获取网络信息状态,如当前的网络连接是否有效<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">ACCESS_SURFACE_FLINGER</span> 访问<span class=\"hljs-title class_\">Surface</span> <span class=\"hljs-title class_\">Flinger</span> <span class=\"hljs-title class_\">Android</span>平台上底层的图形显示支持,一般用于游戏或照相机预览界面和底层模式的屏幕截图<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">ACCESS_WIFI_STATE</span> 获取<span class=\"hljs-title class_\">WiFi</span>状态 获取当前<span class=\"hljs-title class_\">WiFi</span>接入的状态以及<span class=\"hljs-variable constant_\">WLAN</span>热点的信息<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">ACCOUNT_MANAGER</span> 账户管理 获取账户验证信息,主要为<span class=\"hljs-title class_\">GMail</span>账户信息,只有系统级进程才能访问的权限<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">AUTHENTICATE_ACCOUNTS</span> 验证账户 允许一个程序通过账户验证方式访问账户管理<span class=\"hljs-variable constant_\">ACCOUNT_MANAGER</span>相关信息<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BATTERY_STATS</span> 电量统计 获取电池电量统计信息<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BIND_APPWIDGET</span> 绑定小插件 允许一个程序告诉appWidget服务需要访问小插件的数据库,只有非常少的应用才用到此权限<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BIND_DEVICE_ADMIN</span> 绑定设备管理 请求系统管理员接收者receiver,只有系统才能使用<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BIND_INPUT_METHOD</span> 绑定输入法 请求<span class=\"hljs-title class_\">InputMethodService</span>服务,只有系统才能使用<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BIND_REMOTEVIEWS</span> 绑定<span class=\"hljs-title class_\">RemoteView</span> 必须通过<span class=\"hljs-title class_\">RemoteViewsService</span>服务来请求,只有系统才能用<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BIND_WALLPAPER</span> 绑定壁纸 必须通过<span class=\"hljs-title class_\">WallpaperService</span>服务来请求,只有系统才能用<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BLUETOOTH</span> 使用蓝牙 允许程序连接配对过的蓝牙设备<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BLUETOOTH_ADMIN</span> 蓝牙管理 允许程序进行发现和配对新的蓝牙设备<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BRICK</span> 变成砖头 能够禁用手机,非常危险,顾名思义就是让手机变成砖头<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BROADCAST_PACKAGE_REMOVED</span> 应用删除时广播 当一个应用在删除时触发一个广播<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BROADCAST_SMS</span> 收到短信时广播 当收到短信时触发一个广播<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BROADCAST_STICKY</span> 连续广播 允许一个程序收到广播后快速收到下一个广播<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">BROADCAST_WAP_PUSH</span> <span class=\"hljs-variable constant_\">WAP</span> <span class=\"hljs-variable constant_\">PUSH</span>广播 <span class=\"hljs-variable constant_\">WAP</span> <span class=\"hljs-variable constant_\">PUSH</span>服务收到后触发一个广播<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CALL_PHONE</span> 拨打电话 允许程序从非系统拨号器里输入电话号码<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CALL_PRIVILEGED</span> 通话权限 允许程序拨打电话,替换系统的拨号器界面<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CAMERA</span> 拍照权限 允许访问摄像头进行拍照<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CHANGE_COMPONENT_ENABLED_STATE</span> 改变组件状态 改变组件是否启用状态<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CHANGE_CONFIGURATION</span> 改变配置 允许当前应用改变配置,如定位<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CHANGE_NETWORK_STATE</span> 改变网络状态 改变网络状态如是否能联网<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CHANGE_WIFI_MULTICAST_STATE</span> 改变<span class=\"hljs-title class_\">WiFi</span>多播状态 改变<span class=\"hljs-title class_\">WiFi</span>多播状态<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CHANGE_WIFI_STATE</span> 改变<span class=\"hljs-title class_\">WiFi</span>状态 改变<span class=\"hljs-title class_\">WiFi</span>状态<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CLEAR_APP_CACHE</span> 清除应用缓存 清除应用缓存<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CLEAR_APP_USER_DATA</span> 清除用户数据 清除应用的用户数据<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CWJ_GROUP</span> 底层访问权限 允许<span class=\"hljs-variable constant_\">CWJ</span>账户组访问底层信息<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CELL_PHONE_MASTER_EX</span> 手机优化大师扩展权限 手机优化大师扩展权限<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">CONTROL_LOCATION_UPDATES</span> 控制定位更新 允许获得移动网络定位信息改变<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">DELETE_CACHE_FILES</span> 删除缓存文件 允许应用删除缓存文件<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">DELETE_PACKAGES</span> 删除应用 允许程序删除应用<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">DEVICE_POWER</span> 电源管理 允许访问底层电源管理<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">DIAGNOSTIC</span> 应用诊断 允许程序到<span class=\"hljs-variable constant_\">RW</span>到诊断资源<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">DISABLE_KEYGUARD</span> 禁用键盘锁 允许程序禁用键盘锁<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">DUMP</span> 转存系统信息 允许程序获取系统dump信息从系统服务<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">EXPAND_STATUS_BAR</span> 状态栏控制 允许程序扩展或收缩状态栏<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">FACTORY_TEST</span> 工厂测试模式 允许程序运行工厂测试模式<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">FLASHLIGHT</span> 使用闪光灯 允许访问闪光灯<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">FORCE_BACK</span> 强制后退 允许程序强制使用back后退按键,无论<span class=\"hljs-title class_\">Activity</span>是否在顶层<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">GET_ACCOUNTS</span> 访问账户<span class=\"hljs-title class_\">Gmail</span>列表 访问<span class=\"hljs-title class_\">GMail</span>账户列表<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">GET_PACKAGE_SIZE</span> 获取应用大小 获取应用的文件大小<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">GET_TASKS</span> 获取任务信息 允许程序获取当前或最近运行的应用<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">GLOBAL_SEARCH</span> 允许全局搜索 允许程序使用全局搜索功能<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">HARDWARE_TEST</span> 硬件测试 访问硬件辅助设备,用于硬件测试<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">INJECT_EVENTS</span> 注射事件 允许访问本程序的底层事件,获取按键、轨迹球的事件流<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">INSTALL_LOCATION_PROVIDER</span> 安装定位提供 安装定位提供<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">INSTALL_PACKAGES</span> 安装应用程序 允许程序安装应用<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">INTERNAL_SYSTEM_WINDOW</span> 内部系统窗口 允许程序打开内部窗口,不对第三方应用程序开放此权限<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">INTERNET</span> 访问网络 访问网络连接,可能产生<span class=\"hljs-variable constant_\">GPRS</span>流量<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">KILL_BACKGROUND_PROCESSES</span> 结束后台进程 允许程序调用<span class=\"hljs-title function_\">killBackgroundProcesses</span>(<span class=\"hljs-title class_\">String</span>).方法结束后台进程<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">MANAGE_ACCOUNTS</span> 管理账户 允许程序管理<span class=\"hljs-title class_\">AccountManager</span>中的账户列表<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">MANAGE_APP_TOKENS</span> 管理程序引用 管理创建、摧毁、Z轴顺序,仅用于系统<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">MTWEAK_USER</span> 高级权限 允许mTweak用户访问高级系统权限<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">MTWEAK_FORUM</span> 社区权限 允许使用mTweak社区权限<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">MASTER_CLEAR</span> 软格式化 允许程序执行软格式化,删除系统配置信息<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">MODIFY_AUDIO_SETTINGS</span> 修改声音设置 修改声音设置信息<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">MODIFY_PHONE_STATE</span> 修改电话状态 修改电话状态,如飞行模式,但不包含替换系统拨号器界面<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">MOUNT_FORMAT_FILESYSTEMS</span> 格式化文件系统 格式化可移动文件系统,比如格式化清空<span class=\"hljs-variable constant_\">SD</span>卡<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">MOUNT_UNMOUNT_FILESYSTEMS</span> 挂载文件系统 挂载、反挂载外部文件系统<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">NFC</span> 允许<span class=\"hljs-variable constant_\">NFC</span>通讯 允许程序执行<span class=\"hljs-variable constant_\">NFC</span>近距离通讯操作,用于移动支持<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">PERSISTENT_ACTIVITY</span> 永久<span class=\"hljs-title class_\">Activity</span> 创建一个永久的<span class=\"hljs-title class_\">Activity</span>,该功能标记为将来将被移除<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">PROCESS_OUTGOING_CALLS</span> 处理拨出电话 允许程序监视,修改或放弃播出电话<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_CALENDAR</span> 读取日程提醒 允许程序读取用户的日程信息<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_CONTACTS</span> 读取联系人 允许应用访问联系人通讯录信息<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_FRAME_BUFFER</span> 屏幕截图 读取帧缓存用于屏幕截图<br>com.<span class=\"hljs-property\">android</span>.<span class=\"hljs-property\">browser</span>.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_HISTORY_BOOKMARKS</span> 读取收藏夹和历史记录 读取浏览器收藏夹和历史记录<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_INPUT_STATE</span> 读取输入状态 读取当前键的输入状态,仅用于系统<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_LOGS</span> 读取系统日志 读取系统底层日志<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_PHONE_STATE</span> 读取电话状态 访问电话状态<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_SMS</span> 读取短信内容 读取短信内容<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_SYNC_SETTINGS</span> 读取同步设置 读取同步设置,读取<span class=\"hljs-title class_\">Google</span>在线同步设置<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">READ_SYNC_STATS</span> 读取同步状态 读取同步状态,获得<span class=\"hljs-title class_\">Google</span>在线同步状态<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">REBOOT</span> 重启设备 允许程序重新启动设备<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">RECEIVE_BOOT_COMPLETED</span> 开机自动允许 允许程序开机自动运行<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">RECEIVE_MMS</span> 接收彩信 接收彩信<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">RECEIVE_SMS</span> 接收短信 接收短信<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">RECEIVE_WAP_PUSH</span> 接收<span class=\"hljs-title class_\">Wap</span> <span class=\"hljs-title class_\">Push</span> 接收<span class=\"hljs-variable constant_\">WAP</span> <span class=\"hljs-variable constant_\">PUSH</span>信息<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">RECORD_AUDIO</span> 录音 录制声音通过手机或耳机的麦克<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">REORDER_TASKS</span> 排序系统任务 重新排序系统Z轴运行中的任务<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">RESTART_PACKAGES</span> 结束系统任务 结束任务通过<span class=\"hljs-title function_\">restartPackage</span>(<span class=\"hljs-title class_\">String</span>)方法,该方式将在外来放弃<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SEND_SMS</span> 发送短信 发送短信<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_ACTIVITY_WATCHER</span> 设置<span class=\"hljs-title class_\">Activity</span>观察其 设置<span class=\"hljs-title class_\">Activity</span>观察器一般用于monkey测试<br>com.<span class=\"hljs-property\">android</span>.<span class=\"hljs-property\">alarm</span>.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_ALARM</span> 设置闹铃提醒 设置闹铃提醒<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_ALWAYS_FINISH</span> 设置总是退出 设置程序在后台是否总是退出<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_ANIMATION_SCALE</span> 设置动画缩放 设置全局动画缩放<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_DEBUG_APP</span> 设置调试程序 设置调试程序,一般用于开发<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_ORIENTATION</span> 设置屏幕方向 设置屏幕方向为横屏或标准方式显示,不用于普通应用<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_PREFERRED_APPLICATIONS</span> 设置应用参数 设置应用的参数,已不再工作具体查看<span class=\"hljs-title function_\">addPackageToPreferred</span>(<span class=\"hljs-title class_\">String</span>)介绍<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_PROCESS_LIMIT</span> 设置进程限制 允许程序设置最大的进程数量的限制<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_TIME</span> 设置系统时间 设置系统时间<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_TIME_ZONE</span> 设置系统时区 设置系统时区<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_WALLPAPER</span> 设置桌面壁纸 设置桌面壁纸<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SET_WALLPAPER_HINTS</span> 设置壁纸建议 设置壁纸建议<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SIGNAL_PERSISTENT_PROCESSES</span> 发送永久进程信号 发送一个永久的进程信号<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">STATUS_BAR</span> 状态栏控制 允许程序打开、关闭、禁用状态栏<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SUBSCRIBED_FEEDS_READ</span> 访问订阅内容 访问订阅信息的数据库<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SUBSCRIBED_FEEDS_WRITE</span> 写入订阅内容 写入或修改订阅内容的数据库<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">SYSTEM_ALERT_WINDOW</span> 显示系统窗口 显示系统窗口<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">UPDATE_DEVICE_STATS</span> 更新设备状态 更新设备状态<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">USE_CREDENTIALS</span> 使用证书 允许程序请求验证从<span class=\"hljs-title class_\">AccountManager</span><br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">USE_SIP</span> 使用<span class=\"hljs-variable constant_\">SIP</span>视频 允许程序使用<span class=\"hljs-variable constant_\">SIP</span>视频服务<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">VIBRATE</span> 使用振动 允许振动<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WAKE_LOCK</span> 唤醒锁定 允许程序在手机屏幕关闭后后台进程仍然运行<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WRITE_APN_SETTINGS</span> 写入<span class=\"hljs-variable constant_\">GPRS</span>接入点设置 写入网络<span class=\"hljs-variable constant_\">GPRS</span>接入点设置<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WRITE_CALENDAR</span> 写入日程提醒 写入日程,但不可读取<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WRITE_CONTACTS</span> 写系人 写系人,但不可读取<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WRITE_EXTERNAL_STORAGE</span> 写入外部存储 允许程序写入外部存储,如<span class=\"hljs-variable constant_\">SD</span>卡上写文件<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WRITE_GSERVICES</span> 写入<span class=\"hljs-title class_\">Google</span>地图数据 允许程序写入<span class=\"hljs-title class_\">Google</span> <span class=\"hljs-title class_\">Map</span>服务数据<br>com.<span class=\"hljs-property\">android</span>.<span class=\"hljs-property\">browser</span>.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WRITE_HISTORY_BOOKMARKS</span> 写入收藏夹和历史记录 写入浏览器历史记录或收藏夹,但不可读取<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WRITE_SECURE_SETTINGS</span> 读写系统敏感设置 允许程序读写系统安全敏感的设置项<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WRITE_SETTINGS</span> 读写系统设置 允许读写系统设置项<br>android.<span class=\"hljs-property\">permission</span>.<span class=\"hljs-property\">WRITE_SMS</span> 编写短信 允许编写短信<br></code></pre></td></tr></table></figure>\n\n","categories":["生活"],"tags":["生活"]},{"title":"Three.js-学习","url":"/2023/08/29/ThreeJs-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>Three.js 是一款运行在浏览器中的 3D 引擎，你可以用它创建各种三维场景，包括了摄影机、光影、材质等各种对象。你可 以在它的主页上看到许多精采的演示。不过，这款引擎目前还处在比较不成熟的开发阶段，其不够丰富的 API 以及匮乏的文档增加了初学者的学习难度（尤其是文档的匮乏）</li>\n</ul>\n"},{"title":"Vue2 学习","url":"/2023/06/09/Vue2-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"Vue-简介\"><a href=\"#Vue-简介\" class=\"headerlink\" title=\"Vue 简介\"></a>Vue 简介</h2><p>Vue 是一套用于构建用户界面的 渐进式框架 。</p>\n<p>与其它大型框架不同的是，Vue 采用自底向上增量开发的设计。</p>\n<p>Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和Vue生态系统支持的库开发的复杂单页应用。</p>\n<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>\n<p>最初它不过是个人项目，时至今日，已成为全世界三大前端框架之一，github 上拥有 19.8万 Star。 领先于 React 和 Angular，在国内更是首选。</p>\n<h2 id=\"Vue是什么？\"><a href=\"#Vue是什么？\" class=\"headerlink\" title=\"Vue是什么？\"></a>Vue是什么？</h2><ul>\n<li><p>定义：以数据驱动视图的MVVM渐进式框架</p>\n<ul>\n<li>数据：对象</li>\n<li>视图：dom标签 –&gt; 虚拟dom</li>\n<li>MVVM：M model模型，V view视图。就是一种框架架构，model-view view-model， 这样的结构，主要优势在于监控者数据双向绑定的特性，vue和model之间是双向数据传递的。视图改变数据就可以改变，数据改变视图就可以改变。</li>\n<li>渐进式：轻量级框架，可以选择性的，只使用vue中很少的一部分，而不是必须使用全部</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"BTW——MVC和MVVM\"><a href=\"#BTW——MVC和MVVM\" class=\"headerlink\" title=\"BTW——MVC和MVVM\"></a>BTW——MVC和MVVM</h3><ul>\n<li><p>MVVM有两个方向：</p>\n<ol>\n<li>将model（模型）转化成 view（视图），即后端传递的数据转化成所看到的页面。实现方式为数据绑定</li>\n<li>将view（视图）转化成 model（模型），即将所看的页面转化成后端的数据。实现方式为dom监听事件</li>\n</ol>\n</li>\n<li><p>什么是mvc？</p>\n<ul>\n<li>MVC是model-view-controller的缩写，即模型——视图——控制器。M和V指的意思和MVVM中的M和V意思一样。C即Controller指的是页面业务逻辑。使用MVC的目的就是将M和V的代码分离。MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。</li>\n</ul>\n</li>\n<li><p>区别：</p>\n<ul>\n<li>MVC和MVVM的区别并不是VM完全取代了C，只是在MVC的基础上增加了一层VM，只不过是弱化了C的概念，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。</li>\n<li>View更新的时候，必须要通过Controller去更新一遍Model；同样的Model更新的时候，也要去更新一遍视图。<br> [!MVVM优点]:<br> 实现的是业务逻辑组件的重用，使开发更高效，结构更清晰，增加代码的复用性。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vue-js核心？\"><a href=\"#vue-js核心？\" class=\"headerlink\" title=\"vue.js核心？\"></a>vue.js核心？</h3><ul>\n<li>官方定义：通过尽可能简单的API实现响应的数据绑定和组合的视图组件</li>\n</ul>\n<h3 id=\"数据驱动\"><a href=\"#数据驱动\" class=\"headerlink\" title=\"数据驱动\"></a>数据驱动</h3><ul>\n<li>传统js手动改变DOM来改变视图，vue.js只需要改变数据就会自动改变视图，就是MVVM思想的实现</li>\n</ul>\n<h3 id=\"视图组件化\"><a href=\"#视图组件化\" class=\"headerlink\" title=\"视图组件化\"></a>视图组件化</h3><ul>\n<li>定义：把网页拆分一个个区块，每个区块我们可以看成一个组件。网页由多个组件拼接或嵌套组成</li>\n</ul>\n<h3 id=\"vue的特点\"><a href=\"#vue的特点\" class=\"headerlink\" title=\"vue的特点\"></a>vue的特点</h3><ul>\n<li>响应式编程：编写代码基于对变化的反应</li>\n<li>组件化</li>\n</ul>\n<h4 id=\"组件和模块\"><a href=\"#组件和模块\" class=\"headerlink\" title=\"组件和模块\"></a>组件和模块</h4><ul>\n<li><p>组件：把重复代码提取出来合并成为一个组件，组件最重要的是复用，位于框架最底层，其他功能依赖于组件，可供不同功能使用，独立性强</p>\n</li>\n<li><p>模块：分属同一功能&#x2F;业务的代码进行隔离（分装）成独立的模块，可以独立运行，以页面、功能或其他不同粒度划分程度不同的模块。位于业务框架层，模块间通过接口调用，目的是降低模块间的耦合，由之前的主应用与模块耦合，变为主应用与接口耦合，接口与模块耦合<br>[比喻]模块就像有多个USB插口的充电宝，可以和多部手机充电，接口可以随意插拔。复用性很强，可以独立管理。</p>\n</li>\n<li><p>组件化模块化区别？</p>\n<ol>\n<li>组件相当于库，把一些能在项目里或者不同类型项目中可复用的代码进行封装</li>\n<li>而模块相当于业务逻辑模块，把同一类型项目里的功能逻辑进行需求性的封装</li>\n</ol>\n</li>\n<li><p>为什么要用组件和模块</p>\n<ul>\n<li>开发和调式效率高</li>\n<li>可维护性强</li>\n<li>避免阻断</li>\n<li>版本管理更容易</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vue的优缺点？\"><a href=\"#vue的优缺点？\" class=\"headerlink\" title=\"vue的优缺点？\"></a>vue的优缺点？</h3><ul>\n<li>优点：轻量级框架，数据双向绑定，组件化，虚拟dom，运行速度快</li>\n<li>缺点：<ul>\n<li>不支持ie678</li>\n<li>生态环境差不如angular和react</li>\n<li>社区不大</li>\n<li>无高阶书籍</li>\n<li>首屏加载速度满，加载时，将所有的css,js文件进行加载</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"BTW——首屏加载慢解决方式\"><a href=\"#BTW——首屏加载慢解决方式\" class=\"headerlink\" title=\"BTW——首屏加载慢解决方式\"></a>BTW——首屏加载慢解决方式</h4><ul>\n<li>减少入口文件体积</li>\n<li>UI框架按需引入</li>\n<li>静态资源本地缓存</li>\n<li>图片资源压缩</li>\n<li>组件重复打包</li>\n<li>使用SSR（通过对文件、目录、进程、注册表和服务的强制访问控制，有效的制约和分散了原有系统管理员的权限）</li>\n</ul>\n<h4 id=\"BTW——粒度和耦合\"><a href=\"#BTW——粒度和耦合\" class=\"headerlink\" title=\"BTW——粒度和耦合\"></a>BTW——粒度和耦合</h4><ul>\n<li>粒度：计算机中常指系统内存扩展增量的最小值。粒度问题是设计数据仓库的一个最重要方面。粒度是指数据仓库的数据单位中保存数据的细化或综合程度的级别。细化程度越高，粒度级就越小；相反，细化程度越低，粒度级就越大。数据的粒度一直是一个设计问题。</li>\n<li>耦合：两个东西通过某种作用连接在了一起</li>\n</ul>\n<h2 id=\"vue核心的底层原理\"><a href=\"#vue核心的底层原理\" class=\"headerlink\" title=\"vue核心的底层原理\"></a>vue核心的底层原理</h2><ul>\n<li><p>Object.defineProperty数据劫持的API</p>\n</li>\n<li><p>Object.defineProperty定义新属性或修改原有的属性，vue的数据双向绑定原理就是Object.defineProperty，里面定义了setter和getter方法，通过观察者模式(发布订阅模式)来监听数据变化，从而做相应的逻辑处理</p>\n</li>\n<li><p>监听对象属性变化，只关心数据不关心视图</p>\n</li>\n<li><p>三个参数- 三个参数Object.defineProperty(object,propName,descriptor)</p>\n<ul>\n<li>object 对象&#x3D;&gt;给谁加</li>\n<li>propName 属性名&#x3D;&gt;需要加的属性的名字[类型:String]</li>\n<li>descriptor 属性描述&#x3D;&gt;加的这个属性有什么特性[类型：Object]</li>\n<li>方法就是直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</li>\n</ul>\n</li>\n<li><p>属性描述符</p>\n<ul>\n<li><p>configurable: true 配置可删除，默认false</p>\n<ul>\n<li><p>两个作用：</p>\n<ol>\n<li>目标属性是否可以使用delete删除</li>\n<li>目标属性是否可以再次设置特性</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>writable：true 配置可修改，默认false</p>\n</li>\n<li><p>enumerable:true 可枚举，使用(for…in或Object,keys())默认false</p>\n</li>\n<li><p>value属性对应的值，可以是任意类型的值，默认undefined</p>\n</li>\n<li><p>缺点：数组的长度</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// writable应用</span><br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Person</span> = &#123;&#125;<br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(<span class=\"hljs-title class_\">Person</span>,<span class=\"hljs-string\">&#x27;name&#x27;</span>,&#123;<span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;Jack&#x27;</span>,<br>        <span class=\"hljs-comment\">// writable:true // 加上这个就可以输出&#123;name:&#x27;Rose&#x27;&#125;</span><br>    &#125;)<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Person</span>) <span class=\"hljs-comment\">// &#123;name:&#x27;Jack&#x27;&#125;</span><br>    <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\">name</span> = <span class=\"hljs-string\">&#x27;Rose&#x27;</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Person</span>) <span class=\"hljs-comment\">//undefined,因为writable默认false</span><br><span class=\"hljs-comment\">// enumerable应用</span><br>    <span class=\"hljs-keyword\">var</span> user=&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;小五&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-string\">&#x27;24&#x27;</span>&#125;;<br>    <span class=\"hljs-comment\">// es6</span><br>        <span class=\"hljs-keyword\">var</span> keys = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(user)<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(keys) <span class=\"hljs-comment\">// [&#x27;name&#x27;,&#x27;age&#x27;]</span><br>    <span class=\"hljs-comment\">// es5</span><br>        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Key</span> = []<br>        <span class=\"hljs-keyword\">for</span>(key <span class=\"hljs-keyword\">in</span> user) &#123;<br>            <span class=\"hljs-title class_\">Key</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-title class_\">Key</span>)<br>        &#125;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Key</span>) <span class=\"hljs-comment\">// [&#x27;name&#x27;,&#x27;age&#x27;]</span><br><span class=\"hljs-comment\">// configurable应用</span><br>    <span class=\"hljs-keyword\">var</span> human=&#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&#x27;李白&#x27;</span>,<span class=\"hljs-attr\">age</span>:<span class=\"hljs-string\">&#x27;不详&#x27;</span>&#125;；<br>    <span class=\"hljs-comment\">// 定义一个性别，不可被删除和重新定义特性</span><br>        <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(human,<span class=\"hljs-string\">&#x27;gender&#x27;</span>,&#123;<br>            <span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>,<br>            <span class=\"hljs-attr\">enumerable</span>:<span class=\"hljs-literal\">true</span>,<br>            <span class=\"hljs-attr\">configurable</span>:<span class=\"hljs-literal\">false</span><br>        &#125;)<br>    <span class=\"hljs-comment\">// 删除一下</span><br>        <span class=\"hljs-keyword\">delete</span> human.<span class=\"hljs-property\">gender</span><br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(human)<span class=\"hljs-comment\">//&#123;name:&quot;李白&quot;,age:&quot;不详&quot;,gender:&quot;男&quot;&#125; 并没有删除</span><br>    <span class=\"hljs-comment\">// 重新定义特性</span><br>        <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(human,<span class=\"hljs-string\">&#x27;gender&#x27;</span>,&#123;<br>            <span class=\"hljs-attr\">value</span>:<span class=\"hljs-string\">&#x27;男&#x27;</span>,<br>            <span class=\"hljs-attr\">enumerable</span>:<span class=\"hljs-literal\">true</span>,<br>            <span class=\"hljs-attr\">configurable</span>:<span class=\"hljs-literal\">true</span><br>        &#125;)<br>        <span class=\"hljs-keyword\">delete</span> human.<span class=\"hljs-property\">gender</span>;<br>        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(human) <span class=\"hljs-comment\">// &#123;name:&quot;李白&quot;,age:&quot;不详&quot;&#125;</span><br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li>存取描述符</li>\n</ul>\n<blockquote>\n<p>get<br>一个给属性提供 getter 的方法，如果没有getter则为undefined。该方法返回值被用作属性值。默认为undefined。getter就是获取属性值<br>set<br>一个给属性提供 setter 的方法，如果没有setter则为undefined。该方法将接收唯一参数，并将该参数的新值分配给属性。默认为undefined。setter就是设置属性值<br>[!注意]：1. 当使用getter或setter方法，不允许使用writable和value这两个属性<br>2. get或set不是必须成对出现，任写其一就行。如果不设置方法，get和set默认undefined</p>\n</blockquote>\n<h4 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> username = &#123;<span class=\"hljs-attr\">name</span>:<span class=\"hljs-string\">&quot;不想起名了&quot;</span>&#125;;<br><span class=\"hljs-keyword\">var</span> num = <span class=\"hljs-number\">12</span><br><span class=\"hljs-comment\">// 定义一个age获取值时返回定义好的变量</span><br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(username,<span class=\"hljs-string\">&#x27;age&#x27;</span>,&#123;<br>        <span class=\"hljs-attr\">get</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> num<br>        &#125;<br>    &#125;)<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(username.<span class=\"hljs-property\">age</span>);<span class=\"hljs-comment\">//12</span><br><span class=\"hljs-comment\">// 定义一个age获取值时返回定义好的变量num</span><br>    <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(username,<span class=\"hljs-string\">&#x27;age&#x27;</span>,&#123;<br>        <span class=\"hljs-attr\">get</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> num<br>        &#125;<br>        <span class=\"hljs-attr\">set</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>            num = newVal<br>        &#125;<br>    &#125;)<br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(username.<span class=\"hljs-property\">age</span>);<span class=\"hljs-comment\">// 12</span><br>    username.<span class=\"hljs-property\">age</span> = <span class=\"hljs-number\">145</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(username.<span class=\"hljs-property\">age</span>); <span class=\"hljs-comment\">// 145</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(num); <span class=\"hljs-comment\">// 145</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>兼容性：IE8以下不行</li>\n<li>使用Object.defineProperty的优点<ol>\n<li>减少代码（少了dom,不需要写很多dom）</li>\n<li>开发速度快</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"BTW——数据劫持\"><a href=\"#BTW——数据劫持\" class=\"headerlink\" title=\"BTW——数据劫持\"></a>BTW——数据劫持</h4><ul>\n<li>定义：修改或访问对象的属性时，通过一段代码拦截这个行为，进行额外的操作或者修改返回结果</li>\n</ul>\n<h2 id=\"vue环境搭建\"><a href=\"#vue环境搭建\" class=\"headerlink\" title=\"vue环境搭建\"></a>vue环境搭建</h2><ul>\n<li>环境需要:nodejs 检测cmd:node-v</li>\n<li>安装全局脚手架:npm i -g @vue&#x2F;cli 检测：vue-Vyarn global add @vue&#x2F;cli</li>\n<li>脚手架网站:cli.vuejs.org</li>\n<li>vue官网: vuejs.org</li>\n</ul>\n<h3 id=\"创建vue项目\"><a href=\"#创建vue项目\" class=\"headerlink\" title=\"创建vue项目\"></a>创建vue项目</h3><blockquote>\n<p>【注意】:项目名称不能是中文，不能是大写字母，不能用vue做名字</p>\n</blockquote>\n<h4 id=\"命令运行方式\"><a href=\"#命令运行方式\" class=\"headerlink\" title=\"命令运行方式\"></a>命令运行方式</h4><table><td bgcolor=\"#7FFFD4\"><font color=\"#FF0000\">vue create name</font></td></table>\n\n\n\n<h4 id=\"gui图形化方式\"><a href=\"#gui图形化方式\" class=\"headerlink\" title=\"gui图形化方式\"></a>gui图形化方式</h4><table><td bgcolor=\"#7FFFD4\"><font color=\"#FF0000\">vue ui</font></td></table>\n\n\n\n<h3 id=\"vue脚手架\"><a href=\"#vue脚手架\" class=\"headerlink\" title=\"vue脚手架\"></a>vue脚手架</h3><ul>\n<li>定义:vue的cli脚手架底层是webpack,也就是基于webpack封装的</li>\n</ul>\n<p>   [官网] (<a href=\"https://cli.vuejs.org/zh/guide/\">https://cli.vuejs.org/zh/guide/</a>)</p>\n<h3 id=\"BTW——是脚手架？\"><a href=\"#BTW——是脚手架？\" class=\"headerlink\" title=\"BTW——是脚手架？\"></a>BTW——是脚手架？</h3><ol>\n<li>什么是脚手架？<ul>\n<li>构建基于数据库的应用，进行增、删、改、查数据库的操作</li>\n</ul>\n</li>\n<li>Vue-CLi是什么？<ul>\n<li>是vuejs脚手架工具，就是自动帮你生成好项目目录，配置好webpack，以及各种依赖包工具</li>\n<li>为什么要用？可以帮助你快速开启一个vue项目，给你一套文件结构，包含基础的依赖库，只需要npm install 一下就可以安装，不需要为编译或其他琐碎事而浪费时间，而且不会限制到你发挥</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"脚手架配置\"><a href=\"#脚手架配置\" class=\"headerlink\" title=\"脚手架配置\"></a>脚手架配置</h3><ul>\n<li>vue.config.js文件是脚手架配置文件，该文件必须放在项目的根目录里</li>\n</ul>\n<h4 id=\"请求代理【跨域方案】\"><a href=\"#请求代理【跨域方案】\" class=\"headerlink\" title=\"请求代理【跨域方案】\"></a>请求代理【跨域方案】</h4><p>脚手架-&gt;webpack-&gt;nodejs【后端】<br>使用后端转发请求<br>【注意】只能在开发环境中使用<br>【使用场景】在公司里和后端的测试接口进行接口调式使用</p>\n<h4 id=\"语法-2\"><a href=\"#语法-2\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>=&#123;<br>    <span class=\"hljs-attr\">devServer</span>:&#123;<br>        <span class=\"hljs-comment\">// 浏览器自动打开</span><br>        <span class=\"hljs-attr\">open</span>:<span class=\"hljs-literal\">true</span>,<br>        <span class=\"hljs-comment\">// 代理</span><br>        <span class=\"hljs-attr\">proxy</span>:&#123;<br>            <span class=\"hljs-string\">&quot;/api&quot;</span>:&#123;<br>                <span class=\"hljs-attr\">target</span>:<span class=\"hljs-string\">&quot;http://xx.com&quot;</span>,<br>                <span class=\"hljs-attr\">changeOrigin</span>:<span class=\"hljs-literal\">true</span>,<br>                <span class=\"hljs-attr\">pathRewrite</span>:&#123;<br>                    <span class=\"hljs-string\">&quot;^/api&quot;</span>:<span class=\"hljs-string\">&quot;&quot;</span>,<br>                &#125;,<br>            &#125;,<br>        &#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"关闭源码映射【性能优化】\"><a href=\"#关闭源码映射【性能优化】\" class=\"headerlink\" title=\"关闭源码映射【性能优化】\"></a>关闭源码映射【性能优化】</h4><ul>\n<li>productionSourceMap:false<br>打包的时候，每一个js文件对应生成一个map源码映射文件，它在生产环境中时没有用的。它会增加打包时间，浪费磁盘空间，以及容易造成代码泄漏等问题，因此需要在生产环境中关闭，只允许开发环境中开启</li>\n</ul>\n<h4 id=\"关闭eslint代码校验\"><a href=\"#关闭eslint代码校验\" class=\"headerlink\" title=\"关闭eslint代码校验\"></a>关闭eslint代码校验</h4><ul>\n<li>lintOnSave:false</li>\n</ul>\n<h3 id=\"AIA：脚手架配置有哪些？\"><a href=\"#AIA：脚手架配置有哪些？\" class=\"headerlink\" title=\"AIA：脚手架配置有哪些？\"></a>AIA：脚手架配置有哪些？</h3><ol>\n<li>代码校验</li>\n<li>代码映射的开启与关闭</li>\n<li>请求代理vue.config.js</li>\n</ol>\n<h2 id=\"vue项目结构\"><a href=\"#vue项目结构\" class=\"headerlink\" title=\"vue项目结构\"></a>vue项目结构</h2><h3 id=\"运行命令\"><a href=\"#运行命令\" class=\"headerlink\" title=\"运行命令\"></a>运行命令</h3><ul>\n<li>项目根目录里有一个package.json文件，该文件有一个script对象，里面就是自定义运行命令。（是这三个里唯一一个可以删的）</li>\n<li>serve开发环境，写代码时的环境</li>\n<li>build生产环境，打包发布时的环境</li>\n</ul>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><ul>\n<li>node_modules它是项目运行时必须依赖</li>\n<li>public公共目录，存放着唯一的html模板</li>\n<li>src【核心-源码】项目所有代码</li>\n<li>.gitignore过滤掉git仓库里不需要的文件清单</li>\n<li>babel.config.js把es6转成es5</li>\n<li>package.lock.json(可以删但一般留着)，锁定依赖版本号</li>\n<li>package.json【核心】依赖包管理文件</li>\n<li>README.md说明书</li>\n</ul>\n<h4 id=\"src源码结构\"><a href=\"#src源码结构\" class=\"headerlink\" title=\"src源码结构\"></a>src源码结构</h4><ul>\n<li>assets存放静态资源：图片，css,js脚本</li>\n<li>component放组件</li>\n<li>App.vue根组件，第一个被加载的组件</li>\n<li>main.js入口文件，第一个被执行的文件</li>\n</ul>\n<h3 id=\"模块化开发【vue核心亮点】\"><a href=\"#模块化开发【vue核心亮点】\" class=\"headerlink\" title=\"模块化开发【vue核心亮点】\"></a>模块化开发【vue核心亮点】</h3><p>把一切重复使用的资源，无论是图片，样式还是js代码抽离出来，作为单独的’模块’进行复用</p>\n<ul>\n<li>模块包含：vue 组件，图片，js 脚本，css 样式，字体等都可以是模块。</li>\n</ul>\n<h3 id=\"vue里的模块化组件开发\"><a href=\"#vue里的模块化组件开发\" class=\"headerlink\" title=\"vue里的模块化组件开发\"></a>vue里的模块化组件开发</h3><ol>\n<li>组件必须使用import引入到当前组件</li>\n<li>当前组件的components必须挂载引入的组件</li>\n<li>在当前组件的template里用标签的形式使用挂载的组件</li>\n</ol>\n<h2 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h2><ul>\n<li>渲染文本</li>\n<li>写在两个大括号中间</li>\n</ul>\n<h3 id=\"插值语法可以写哪些值\"><a href=\"#插值语法可以写哪些值\" class=\"headerlink\" title=\"插值语法可以写哪些值\"></a>插值语法可以写哪些值</h3><ul>\n<li>对象、字符串、数字、数组、布尔值、三元表达式、自执行函数等，凡是具有返回值的都可以，全部变成文本渲染出来</li>\n</ul>\n<h3 id=\"BTW——自执行函数和快速删除文件\"><a href=\"#BTW——自执行函数和快速删除文件\" class=\"headerlink\" title=\"BTW——自执行函数和快速删除文件\"></a>BTW——自执行函数和快速删除文件</h3><h4 id=\"自执行函数后面-（）\"><a href=\"#自执行函数后面-（）\" class=\"headerlink\" title=\"自执行函数后面+（）\"></a>自执行函数后面+（）</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&#123;<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)&#123;<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1000</span>()&#125;&#125;<br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"为什么用自执行函数而不是函数\"><a href=\"#为什么用自执行函数而不是函数\" class=\"headerlink\" title=\"为什么用自执行函数而不是函数\"></a>为什么用自执行函数而不是函数</h3><p>用函数也可以，只不过返回时function(){return 1000},而不是1000</p>\n<h3 id=\"插值语法的作用\"><a href=\"#插值语法的作用\" class=\"headerlink\" title=\"插值语法的作用\"></a>插值语法的作用</h3><ol>\n<li>四则运算 100+(200*300)&#x2F;2</li>\n<li>插值里存放变量 (详情请找baseVue.html)</li>\n</ol>\n<h4 id=\"npkill和rimraf快速删除node-modules包\"><a href=\"#npkill和rimraf快速删除node-modules包\" class=\"headerlink\" title=\"npkill和rimraf快速删除node_modules包\"></a>npkill和rimraf快速删除node_modules包</h4><ol>\n<li>全局安装npm i -g npkill</li>\n<li>进入想清理的文件夹</li>\n<li>cd文件路径</li>\n<li>输入npkill</li>\n<li>会自动查找文件中node_modules</li>\n<li>光标上下移动来选择要清理的目录，释放宝贵的空间</li>\n<li>按空格删除</li>\n</ol>\n<h2 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h2><h3 id=\"set添加或修改对象和数组\"><a href=\"#set添加或修改对象和数组\" class=\"headerlink\" title=\"$set添加或修改对象和数组\"></a>$set添加或修改对象和数组</h3><ul>\n<li>添加&#x2F;修改对象的属性 $set(obj,’name’,1)</li>\n<li>添加或修改数组成员$set(arr,index,val)</li>\n</ul>\n<h3 id=\"delete删除对象和数组\"><a href=\"#delete删除对象和数组\" class=\"headerlink\" title=\"$delete删除对象和数组\"></a>$delete删除对象和数组</h3><ul>\n<li>删除对象属性$delete(obj,name)</li>\n<li>删除数组成员$delete(arr,index)</li>\n</ul>\n<h3 id=\"emit派发一个动作向上级通信\"><a href=\"#emit派发一个动作向上级通信\" class=\"headerlink\" title=\"$emit派发一个动作向上级通信\"></a>$emit派发一个动作向上级通信</h3><h3 id=\"mount手动挂载方法\"><a href=\"#mount手动挂载方法\" class=\"headerlink\" title=\"$mount手动挂载方法\"></a>$mount手动挂载方法</h3>","categories":["前端"],"tags":["Vue"]},{"title":"Hello World","url":"/2023/05/24/hello-world/","content":"<h2 id=\"“永远不要失去浪漫的能力”。\"><a href=\"#“永远不要失去浪漫的能力”。\" class=\"headerlink\" title=\"“永远不要失去浪漫的能力”。\"></a>“永远不要失去浪漫的能力”。</h2><p>  ​这个浪漫不单单是指恋爱，更多的是：</p>\n<p>  对于世界的好奇和探索，阅读和书写，天真的想法和骨子里的善良，</p>\n<p>  对于生活必要的仪式感，以及拥有对恶意和黑暗的事物抱有愤怒和反抗的能力 ~</p>\n<p>  和这个世界交手多年，渐渐失去了一些耐心，身体劳累，精神也麻木，对什么都提不起兴趣，</p>\n<p>  把漫长的生命活成同一天，但这样不行，早晚有一天是要发疯的 ~</p>\n<p>  还是要一些坚守和浪漫，要一些别人看来非必要的事物来拯救自己 ~</p>\n<p>  要一些海风，夏天的雨，要低吟的音乐和沉浸的电影，要在心里点燃一盏烛火 ~</p>\n<p>  停止被这个世界融化，花一些时间在这些事物上，</p>\n<p>  凝成自己坚固的核，保护好自己闪闪发光的部分，哪怕只是徒劳 ~</p>\n<p>  觉得难过的时候，记得抬头看看月亮 ~</p>\n"},{"title":"TypeScript-学习","url":"/2023/06/19/TypeScript-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"浅谈-JavaScript\"><a href=\"#浅谈-JavaScript\" class=\"headerlink\" title=\"浅谈 JavaScript\"></a>浅谈 JavaScript</h2><h3 id=\"JavaScript-是一门优秀的编程语言吗？\"><a href=\"#JavaScript-是一门优秀的编程语言吗？\" class=\"headerlink\" title=\"JavaScript 是一门优秀的编程语言吗？\"></a>JavaScript 是一门优秀的编程语言吗？</h3><p>每个人可能观点并不完全一致，但是从很多角度来看，JavaScript 是一门非常优秀的编程语言；<br>而且，可以说在很长一段时间内这个语言不会被代替，并且会在更多的领域被大家广泛使用；</p>\n<h3 id=\"著名的-Atwood-定律：\"><a href=\"#著名的-Atwood-定律：\" class=\"headerlink\" title=\"著名的 Atwood 定律：\"></a>著名的 Atwood 定律：</h3><p>Stack Overflow 的创立者之一的 Jeff Atwood 在 2007 年提出了著名的 Atwood 定律。</p>\n<p>any application that can be written in JavaScript, will eventually be written in JavaScript.</p>\n<p>任何可以使用 JavaScript 来实现的应用都最终都会使用 JavaScript 实现。</p>\n<p>其实我们已经看到了，这句话正在一步步被应验：</p>\n<ul>\n<li>Web 端的开发我们一直都是使用 JavaScript；</li>\n<li>移动端开发可以借助于 ReactNative、Weex、Uniapp 等框架实现跨平台开发；</li>\n<li>小程序端的开发也是离不开 JavaScript；</li>\n<li>桌面端应用程序我们可以借助于 Electron 来开发；</li>\n<li>服务器端开发可以借助于 Node 环境使用 JavaScript 来开发。</li>\n</ul>\n<h3 id=\"JavaScript-的痛点\"><a href=\"#JavaScript-的痛点\" class=\"headerlink\" title=\"JavaScript 的痛点\"></a>JavaScript 的痛点</h3><p>并且随着近几年前端领域的快速发展，让 JavaScript 迅速被普及和受广大开发者的喜爱，借助于 JavaScript 本身的 强大，也让使用 JavaScript 开发的人员越来越多。</p>\n<h3 id=\"优秀的-JavaScript-没有缺点吗？\"><a href=\"#优秀的-JavaScript-没有缺点吗？\" class=\"headerlink\" title=\"优秀的 JavaScript 没有缺点吗？\"></a>优秀的 JavaScript 没有缺点吗？</h3><p>其实上由于各种历史因素，JavaScript 语言本身存在很多的缺点；</p>\n<p>比如 ES5 以及之前的使用的 var 关键字关于作用域的问题；</p>\n<p>比如最初 JavaScript 设计的数组类型并不是连续的内存空间；</p>\n<p>比如直到今天 JavaScript 也没有加入类型检测这一机制；</p>\n<h3 id=\"JavaScript-正在慢慢变好\"><a href=\"#JavaScript-正在慢慢变好\" class=\"headerlink\" title=\"JavaScript 正在慢慢变好\"></a>JavaScript 正在慢慢变好</h3><p>不可否认的是，JavaScript 正在慢慢变得越来越好，无论是从底层设计还是应用层面。</p>\n<p>ES6、7、8 等的推出，每次都会让这门语言更加现代、更加安全、更加方便。</p>\n<p>但是知道今天，JavaScript 在类型检测上依然是毫无进展（为什么类型检测如此重要，我后面会聊到）。</p>\n<h3 id=\"类型带来的问题\"><a href=\"#类型带来的问题\" class=\"headerlink\" title=\"类型带来的问题\"></a>类型带来的问题</h3><p>首先你需要知道，编程开发中我们有一个共识：<strong>错误出现的越早越好</strong></p>\n<p>能在<strong>写代码的时候</strong>发现错误，就不要在<strong>代码编译时</strong>再发现（IDE 的优势就是在代码编写过程中帮助我们发现错 误）。</p>\n<p>能在<strong>代码编译期间</strong>发现错误，就不要在<strong>代码运行期间</strong>再发现（类型检测就可以很好的帮助我们做到这一点）。</p>\n<p>能在开发阶段发现错误，就不要在测试期间发现错误，能在测试期间发现错误，就不要在上线后发现错误。</p>\n<p>现在我们想探究的就是如何在 <strong>代码编译期间</strong> 发现代码的错误：</p>\n<p>JavaScript 可以做到吗？不可以，我们来看下面这段经常可能出现的代码问题。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getLength</span>(<span class=\"hljs-params\">str</span>)&#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(str.<span class=\"hljs-property\">length</span>)<br>&#125;<br><br><span class=\"hljs-title function_\">getLength</span>(<span class=\"hljs-string\">&#x27;abc&#x27;</span>)<br><span class=\"hljs-title function_\">getLength</span>()<br><span class=\"hljs-comment\">// 报错: Uncaught TypeError: Cannot read properties of undefined (reading &#x27;length&#x27;)</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"这是我们一个非常常见的错误：\"><a href=\"#这是我们一个非常常见的错误：\" class=\"headerlink\" title=\"这是我们一个非常常见的错误：\"></a>这是我们一个非常常见的错误：</h3><p>这个错误很大的原因就是因为 JavaScript 没有对我们传入的参数进行任何的限制，只能等到运行期间才发现这个 错误；<br>并且当这个错误产生时，会影响后续代码的继续执行，也就是整个项目都因为一个小小的错误而深入崩溃；</p>\n<h3 id=\"当然，你可能会想：我怎么可能犯这样低级的错误呢？\"><a href=\"#当然，你可能会想：我怎么可能犯这样低级的错误呢？\" class=\"headerlink\" title=\"当然，你可能会想：我怎么可能犯这样低级的错误呢？\"></a>当然，你可能会想：我怎么可能犯这样低级的错误呢？</h3><p>当我们写像我们上面这样的简单的 demo 时，这样的错误很容易避免，并且当出现错误时，也很容易检查出来；</p>\n<p>但是当我们开发一个大型项目时呢？你能保证自己一定不会出现这样的问题吗？而且如果我们是调用别人的类</p>\n<p>库，又如何知道让我们传入的到底是什么样的参数呢？</p>\n<p>但是，如果我们可以给 JavaScript 加上很多限制，在开发中就可以很好的避免这样的问题了：</p>\n<p>比如我们的 getLength 函数中 str 是一个必传的类型，没有调用者没有传编译期间就会报错；</p>\n<p>比如我们要求它的必须是一个 String 类型，传入其他类型就直接报错；</p>\n<p>那么就可以知道很多的错误问题在编译期间就被发现，而不是等到运行时再去发现和修改；</p>\n<h3 id=\"类型思维的缺失\"><a href=\"#类型思维的缺失\" class=\"headerlink\" title=\"类型思维的缺失\"></a>类型思维的缺失</h3><p>我们已经简单体会到没有类型检查带来的一些问题，JavaScript 因为从设计之初就没有考虑类型的约束问题，所以</p>\n<p>造成了前端开发人员关于<strong>类型思维的缺失：</strong></p>\n<p><strong>前端开发人员</strong>通常不关心变量或者参数是什么类型的，如果在必须确定类型时，我们往往需要使用各种判断验 证；</p>\n<p>从其他方向转到前端的人员，也会因为没有类型约束，而总是担心自己的代码不安全，不够健壮；</p>\n<p>所以我们经常会说 JavaScript<strong>不适合开发大型项目</strong>，因为当项目一旦庞大起来，这种宽松的类型约束会带来非常多 的安全隐患，多人员开发它们之间也没有<strong>良好的类型契约。</strong></p>\n<p>比如当我们去实现一个核心类库时，如果没有类型约束，那么需要对别人传入的参数进行各种验证来保证我们 代码的健壮性；</p>\n<p>比如我们去调用别人的函数，对方没有对函数进行任何的注释，我们只能去看里面的逻辑来理解这个函数需要 传入什么参数，返回值是什么类型；</p>\n<h3 id=\"为-JavaScript-添加类型约束的好处\"><a href=\"#为-JavaScript-添加类型约束的好处\" class=\"headerlink\" title=\"为 JavaScript 添加类型约束的好处\"></a>为 JavaScript 添加类型约束的好处</h3><p>背景：JS 的类型系统存在“先天缺陷“，代码中绝大部分错误都是类型错误(Uncaught TypeError )。<br>问题 ∶ 增加了找 Bug、改 Bug 的时间，严重影响开发效率。</p>\n<p>从编程语言的动静来区分</p>\n<p>TypeScript 属于静态类型的编程语言，JS 属于动态类型的编程语言</p>\n<p>静态类型︰编译期做类型检查；动态类型 ∶ 执行期做类型检查。</p>\n<p>代码编译和代码执行的顺序 ∶1 编译，2 执行。</p>\n<p>对于 JS 来说 ∶ 需要等到代码真正去执行的时候才能发现错误（晚）。</p>\n<p>对于 TS 来说 ∶ 在代码编译的时候（代码执行前）就可以发现错误（早）。</p>\n<p>并且，配合 VSCode 等开发工具，TS 可以提前到在编写代码的同时就发现代码中的错误，减少找 bug、改 bug 时间</p>\n<h3 id=\"Ts-相比-Js-的优势\"><a href=\"#Ts-相比-Js-的优势\" class=\"headerlink\" title=\"Ts 相比 Js 的优势\"></a>Ts 相比 Js 的优势</h3><ul>\n<li>更早（写代码的同时）发现错误，减少找 Bug、改 Bug 时间，提升开发效率。</li>\n<li>程序中任何位置的代码都有代码提示，随时随地的安全感，增强了开发体验。</li>\n<li>强大的类型系统提升了代码的可维护性，使得重构代码更加容易。</li>\n<li>支持最新的 ECMAScript 语法，优先体验最新的语法，让你走在前端技术的最前沿。</li>\n<li>TS 类型推断机制，不需要在代码中的每个地方都显示标注类型，让你在享受优势的同时，尽量降低了成本。</li>\n<li>除此之外，Vue 3 源码使用 TS 重写、Angular 默认支持 TS、React 与 TS 完美配合，TypeScript 已成为大中型前端项目的首选编程语言</li>\n</ul>\n<h3 id=\"为了弥补-JavaScript-类型约束上的缺陷，增加类型约束，很多公司推出了自己的方案：\"><a href=\"#为了弥补-JavaScript-类型约束上的缺陷，增加类型约束，很多公司推出了自己的方案：\" class=\"headerlink\" title=\"为了弥补 JavaScript 类型约束上的缺陷，增加类型约束，很多公司推出了自己的方案：\"></a>为了弥补 JavaScript 类型约束上的缺陷，增加类型约束，很多公司推出了自己的方案：</h3><p>2014 年，Facebook 推出了 flow 来对 JavaScript 进行类型检查；</p>\n<p>同年，Microsoft 微软也推出了 TypeScript1.0 版本；</p>\n<p>他们都致力于为 JavaScript 提供类型检查；</p>\n<p>而现在，<strong>无疑 TypeScript 已经完全胜出：</strong></p>\n<p>Vue2.x 的时候采用的就是 flow 来做类型检查；</p>\n<p>Vue3.x 已经全线转向 TypeScript，98.3%使用 TypeScript 进行了重构；</p>\n<p>而 Angular 在很早期就使用 TypeScript 进行了项目重构并且需要使用 TypeScript 来进行开发；</p>\n<p>而甚至 Facebook 公司一些自己的产品也在使用 TypeScript；</p>\n<p>学习 TypeScript 不仅仅可以为我们的代码增加类型约束，而且可以培养我们前端程序员具备类型思维。</p>\n<h2 id=\"TypeScript-介绍\"><a href=\"#TypeScript-介绍\" class=\"headerlink\" title=\"TypeScript 介绍\"></a>TypeScript 介绍</h2><p><img src=\"/../images/tsjieshao.png\" alt=\"TypeScript 介绍\"></p>\n<p>虽然我们已经知道 TypeScript 是干什么的了，也知道它解决了什么样的问题，但是我们还是需要全面的来认识一下 TypeScript 到底是什么？</p>\n<h3 id=\"们来看一下-TypeScript-在-GitHub-和官方上对自己的定义：\"><a href=\"#们来看一下-TypeScript-在-GitHub-和官方上对自己的定义：\" class=\"headerlink\" title=\"们来看一下 TypeScript 在 GitHub 和官方上对自己的定义：\"></a>们来看一下 TypeScript 在 GitHub 和官方上对自己的定义：</h3><p>GitHub 说法：TypeScript is a superset of JavaScript that compiles to clean JavaScript output.</p>\n<p>TypeScript 官网：TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.</p>\n<p>翻译一下：TypeScript 是拥有类型的 JavaScript 超集，它可以编译成普通、干净、完整的 JavaScript 代码。</p>\n<p>怎么理解上面的话呢？</p>\n<p>我们可以将 TypeScript 理解成加强版的 JavaScript。</p>\n<p>JavaScript 所拥有的特性，TypeScript 全部都是支持的，并且它紧随 ECMAScript 的标准，所以 ES6、ES7、ES8 等新语法标准，它都是 支持的；</p>\n<p>并且在语言层面上，不仅仅增加了类型约束，而且包括一些语法的扩展，比如枚举类型（Enum）、元组类型（Tuple）等；</p>\n<p>TypeScript 在实现新特性的同时，总是保持和 ES 标准的同步甚至是领先；</p>\n<p>并且 TypeScript 最终会被编译成 JavaScript 代码，所以你并不需要担心它的兼容性问题，在编译时也不需要借助于 Babel 这样的工具；</p>\n<p>所以，我们可以把 TypeScript 理解成更加强大的 JavaScript，不仅让 JavaScript 更加安全，而且给它带来了诸多好用的好用特性；</p>\n<h2 id=\"TS-初体验\"><a href=\"#TS-初体验\" class=\"headerlink\" title=\"TS 初体验\"></a>TS 初体验</h2><h3 id=\"Ts-的编译环境\"><a href=\"#Ts-的编译环境\" class=\"headerlink\" title=\"Ts 的编译环境\"></a>Ts 的编译环境</h3><p>在前面我们提到过，TypeScript 最终会被编译成 JavaScript 来运行，所以我们需要搭建对应的环境：</p>\n<p>我们需要在电脑上安装 TypeScript，这样就可以通过 TypeScript 的 Compiler 将其编译成 JavaScript；</p>\n<p><img src=\"/../images/ts2.png\" alt=\"TypeScript 2\"></p>\n<p>所以，我们需要全局安装</p>\n<h4 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h4><blockquote>\n<p>npm install typescript -g</p>\n</blockquote>\n<h4 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h4><blockquote>\n<p>tsc –version</p>\n</blockquote>\n<h3 id=\"TS-的运行环境\"><a href=\"#TS-的运行环境\" class=\"headerlink\" title=\"TS 的运行环境\"></a>TS 的运行环境</h3><p>如果我们每次为了查看 TypeScript 代码的运行效果，都通过经过两个步骤的话就太繁琐了：</p>\n<p>第一步：通过 tsc 编译 TypeScript 到 JavaScript 代码；</p>\n<p>第二步：在浏览器或者 Node 环境下运行 JavaScript 代码；</p>\n<p>是否可以简化这样的步骤呢？</p>\n<p>比如编写了 TypeScript 之后可以直接运行在浏览器上？</p>\n<p>比如编写了 TypeScript 之后，直接通过 node 的命令来执行？</p>\n<p>上面我提到的两种方式，可以通过两个解决方案来完成：</p>\n<h4 id=\"方式一：通过-webpack，配置本地的-TypeScript-编译环境和开启一个本地服务，可以直接运行在浏览器上；\"><a href=\"#方式一：通过-webpack，配置本地的-TypeScript-编译环境和开启一个本地服务，可以直接运行在浏览器上；\" class=\"headerlink\" title=\"方式一：通过 webpack，配置本地的 TypeScript 编译环境和开启一个本地服务，可以直接运行在浏览器上；\"></a>方式一：通过 webpack，配置本地的 TypeScript 编译环境和开启一个本地服务，可以直接运行在浏览器上；</h4><ul>\n<li>npm init –y</li>\n<li>npm i webpack webpack-cli –D</li>\n<li>npm i ts-loader typescript –D</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>)<br><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = &#123;<br>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./src/index.ts&#x27;</span>,<br>  <span class=\"hljs-attr\">output</span>: &#123;<br>    <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;dist&#x27;</span>),<br>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;bundle.js&#x27;</span><br>  &#125;,<br>  <span class=\"hljs-attr\">resolve</span>: &#123;<br>    <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">&#x27;.tsx&#x27;</span>,<span class=\"hljs-string\">&#x27;.ts&#x27;</span>, <span class=\"hljs-string\">&#x27;.js&#x27;</span>]<br>  &#125;,<br>  <span class=\"hljs-attr\">module</span>: &#123;<br>    <span class=\"hljs-attr\">rules</span>: [<br>      &#123;<br>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.ts$/</span>,<br>        <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;ts-loader&#x27;</span>,<br>        <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span><br>      &#125;<br>    ]<br>  &#125;<br>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span><br>&#125;<br><br>其它配置项参考webpack章节 ~<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"方式二：通过-ts-node-库，为-TypeScript-的运行提供执行环境；\"><a href=\"#方式二：通过-ts-node-库，为-TypeScript-的运行提供执行环境；\" class=\"headerlink\" title=\"方式二：通过 ts-node 库，为 TypeScript 的运行提供执行环境；\"></a>方式二：通过 ts-node 库，为 TypeScript 的运行提供执行环境；</h4><p>安装 npm install -g ts-node</p>\n<p>另外 ts-node 需要依赖 tslib 和 @types&#x2F;node 两个包：</p>\n<p>npm install tslib @types&#x2F;node -g</p>\n<p>现在，我们可以直接通过 ts-node 来运行 TypeScript 的代码：</p>\n<p>ts-node index.ts</p>\n<p>注意：ts-node 7.0.0 以上就不自动识别 tsconfig.json 了，得加上 –files 才能识别</p>\n<p>ts-node index.ts –files</p>\n","categories":["前端"],"tags":["TypeScript"]},{"title":"Vue3 学习","url":"/2023/06/09/Vue3-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"Vue3-简介\"><a href=\"#Vue3-简介\" class=\"headerlink\" title=\"Vue3 简介\"></a>Vue3 简介</h2><p><img src=\"/../images/v3_1.png\" alt=\"v3\"></p>\n<ul>\n<li><p>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece(海贼王)</p>\n</li>\n<li><p>耗时 2 年多、2600+次提交、30+个 RFC、600+次 PR、99 位贡献者</p>\n</li>\n<li><p>github 上的 tags 地址：<a href=\"https://github.com/vuejs/vue-next/releases/tag/v3.0.0\">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></p>\n</li>\n</ul>\n<h2 id=\"Vue3-带来了什么\"><a href=\"#Vue3-带来了什么\" class=\"headerlink\" title=\"Vue3 带来了什么\"></a>Vue3 带来了什么</h2><ol>\n<li><p>性能的提升</p>\n<ul>\n<li>打包大小减少41%</li>\n<li>初次渲染快 55%, 更新渲染快 133%</li>\n<li>内存减少 54%</li>\n</ul>\n</li>\n<li><p>源码的升级</p>\n<ul>\n<li>使用 Proxy 代替 defineProperty 实现响应式</li>\n<li>重写虚拟 DOM 的实现和 Tree-Shaking</li>\n</ul>\n</li>\n<li><p>拥抱 TypeScript</p>\n<ul>\n<li>Vue3 可以更好的支持 TypeScript</li>\n</ul>\n</li>\n<li><p>新的特性</p>\n<ol>\n<li><p>Composition API(组合 API)</p>\n<ul>\n<li>setup 配置</li>\n<li>ref 与 reactive</li>\n<li>watch 与 watchEffect</li>\n<li>provide 与 inject</li>\n<li>···</li>\n</ul>\n</li>\n<li><p>新的内置组件</p>\n<ul>\n<li>Fragment</li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li><p>其他改变</p>\n<ul>\n<li>新的生命周期钩子</li>\n<li>data 选项应始终被声明为一个函数</li>\n<li>移除 keyCode 支持作为 v-on 的修饰符</li>\n<li>···</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"创建-vue3-项目\"><a href=\"#创建-vue3-项目\" class=\"headerlink\" title=\"创建 vue3 项目\"></a>创建 vue3 项目</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">## 查看@vue/cli版本，确保@vue/cli版本在<span class=\"hljs-number\">4.5</span><span class=\"hljs-number\">.0</span>以上<br>vue --version<br>## 安装或者升级你的@vue/cli<br>npm install -g @vue/cli<br>## 创建<br>vue create vue3_study<br>## 启动<br>cd vue3_study<br>npm run serve<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"Options-API-的弊端\"><a href=\"#Options-API-的弊端\" class=\"headerlink\" title=\"Options API 的弊端\"></a>Options API 的弊端</h2><p>在 Vue2 中，我们编写组件的方式是 OptionsAPI：</p>\n<p>Options API 的一大特点就是在对应的属性中编写对应的功能模块；</p>\n<p>比如 data 定义数据、methods 中定义方法、computed 中定义计算属性、watch 中监听属性改变，也包括生命 周期钩子;</p>\n<p><strong>但是这种代码有一个很大的弊端:</strong></p>\n<p>当我们实现某一个功能时，这个功能对应的代码逻辑会被拆分到各个属性中；</p>\n<p>当我们组件变得更大、更复杂时，逻辑关注点的列表就会增长，那么同一个功能的逻辑就会被拆分的很分散；</p>\n<p>尤其对于那些一开始没有编写这些组件的人来说，这个组件的代码是难以阅读和理解的（阅读组件的其他人）；</p>\n<p><strong>下面我们来看一个非常大的组件，其中的逻辑功能按照颜色进行了划分:</strong></p>\n<p>这种碎片化的代码使用理解和维护这个复杂的组件变得异常困难，并且隐藏了潜在的逻辑问题；</p>\n<p>并且当我们处理单个逻辑关注点时，需要不断的跳到相应的代码块中;</p>\n<table>\n<thead>\n<tr>\n<th>OptionsAPI</th>\n<th>Composition API</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"/../images/v3_2.png\" alt=\"OptionsAPI\"></td>\n<td><img src=\"/../images/v3_3.png\" alt=\"Composition API\"></td>\n</tr>\n</tbody></table>\n<p>如果我们能将同一个逻辑关注 点相关的代码收集在一起会更好。</p>\n<p>这就是<strong>Composition API</strong>想要做的事情，以及可以帮助我 们完成的事情。</p>\n<p>也有人把 Vue Composition API 简称为<strong>VCA</strong>。</p>\n<h2 id=\"认识-Composition-API\"><a href=\"#认识-Composition-API\" class=\"headerlink\" title=\"认识 Composition API\"></a>认识 Composition API</h2><p>那么既然知道 Composition API 想要帮助我们做什么事情，接下来看一下<strong>到底是怎么做</strong>呢？</p>\n<p>为了开始使用 Composition API，我们需要有一个可以实际使用它（编写代码）的地方；</p>\n<p>在 Vue 组件中，这个位置就是 setup 函数；</p>\n<p><strong>setup</strong>其实就是组件的另外一个选项：</p>\n<p>只不过这个选项强大到我们可以用它来替代之前所编写的大部分其他选项；</p>\n<p>比如 methods、computed、watch、data、生命周期等等；</p>\n<p><strong>接下来我们一起学习这个函数的使用:</strong></p>\n<p>函数的参数</p>\n<p>函数的返回值</p>\n<h3 id=\"setup-函数的参数\"><a href=\"#setup-函数的参数\" class=\"headerlink\" title=\"setup 函数的参数\"></a>setup 函数的参数</h3><p>我们先来研究一个 setup 函数的参数，它主要有<strong>两个参数:</strong></p>\n<p>第一个参数：props</p>\n<p>第二个参数：context</p>\n<p>props 非常好理解，它其实就是<strong>父组件传递过来的属性</strong>会被放到 props 对象中，我们在<strong>setup 中如果需要使用</strong>,那么就可以直接通过 props 参数获取:</p>\n<p>对于定义 props 的类型，我们还是和之前的规则是一样的，在 props 选项中定义;</p>\n<p>并且在 template 中依然是可以正常去使用 props 中的属性，比如 message;</p>\n<p>如果我们在 setup 函数中想要使用 props，那么不可以通过 this 去获取（后面我会讲到为什么）;</p>\n<p>因为 props 有直接作为参数传递到 setup 函数中，所以我们可以直接通过参数来使用即可;</p>\n<p>另外一个参数是<strong>context</strong>,我们也称之为是一个<strong>SetupContext</strong>,它里面包含<strong>三个属性:</strong></p>\n<ul>\n<li><strong>attrs：</strong>所有的非 prop 的 attribute;</li>\n<li><strong>slots：</strong>父组件传递过来的插槽(这个在以渲染函数返回时会有作用，后面会讲到);</li>\n<li><strong>emit：</strong>当我们组件内部需要发出事件时会用到 emit（因为我们不能访问 this，所以不可以通过 this.$emit 发出事件）；</li>\n</ul>\n<h3 id=\"setup-函数的返回值\"><a href=\"#setup-函数的返回值\" class=\"headerlink\" title=\"setup 函数的返回值\"></a>setup 函数的返回值</h3><ol>\n<li><strong>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</strong></li>\n<li>若返回一个渲染函数：则可以自定义渲染内容。（了解）</li>\n</ol>\n<p><strong>注意点：</strong></p>\n<ol>\n<li><p>尽量不要与 Vue2.x 配置混用</p>\n<ul>\n<li>Vue2.x 配置（data、methos、computed…）中可以访问到 setup 中的属性、方法。</li>\n<li>但在 setup 中不能访问到 Vue2.x 配置（data、methos、computed…）。</li>\n<li>如果有重名, setup 优先。</li>\n</ul>\n</li>\n<li><p>setup 不能是一个 async 函数，因为返回值不再是 return 的对象, 而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）</p>\n</li>\n</ol>\n<h3 id=\"另外注意：setup-不可以使用-this\"><a href=\"#另外注意：setup-不可以使用-this\" class=\"headerlink\" title=\"另外注意：setup 不可以使用 this\"></a>另外注意：setup 不可以使用 this</h3><p><strong>官方关于 this 有这样一段描述</strong></p>\n<p>表达的含义是 this 并没有指向当前组件实例；</p>\n<p>并且在 setup 被调用之前，data、computed、methods 等都没有被解析；</p>\n<p>所以无法在 setup 中获取 this；</p>\n<p><img src=\"/../images/v3_4.png\" alt=\"OptionsAPI\"></p>\n<p><strong>其实在之前的这段描述是和源码有出入的：</strong></p>\n<p>之前的描述大概含义是不可以使用 this 是因为组件实例还没有被创建出来；</p>\n<p>通过阅读源码发现，代码是按照如下顺序执行的：</p>\n<p>调用 createComponentInstance 创建组件实 例；</p>\n<p>调用 setupComponent 初始化 component 内 部的操作；</p>\n<p>调用 setupStatefulComponent 初始化有状态的组件；</p>\n<p>在 setupStatefulComponent 取出了 setup 函 数；</p>\n<p>通过 callWithErrorHandling 的函数执行 setup；</p>\n<p>从上面的代码我们可以看出， <strong>组件的 instance 肯定是在执行 setup 函数之前就创建出来了。</strong></p>\n<p><img src=\"/../images/v3_5.png\" alt=\"OptionsAPI\"></p>\n<h2 id=\"响应式原理\"><a href=\"#响应式原理\" class=\"headerlink\" title=\"响应式原理\"></a>响应式原理</h2><h3 id=\"Vue2\"><a href=\"#Vue2\" class=\"headerlink\" title=\"Vue2\"></a>Vue2</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// vue2.x 双向数据绑定原理是通过Objcet.defineProperty来实现的</span><br><span class=\"hljs-comment\">// 这种方式有缺点: 数组的长度 数组的内容发生变化检测不到</span><br><br><span class=\"hljs-keyword\">let</span> obj = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;zs&quot;</span>,<br>  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">18</span>,<br>  <span class=\"hljs-attr\">phone</span>: &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;iphone&quot;</span>,<br>  &#125;,<br>&#125;;<br><span class=\"hljs-comment\">// let obj = [1, 2, 3, 4, 5]</span><br><span class=\"hljs-comment\">// 视图更新的方法</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;视图更新了 ~&quot;</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> methods = [<span class=\"hljs-string\">&quot;push&quot;</span>, <span class=\"hljs-string\">&quot;pop&quot;</span>, <span class=\"hljs-string\">&quot;shift&quot;</span>, <span class=\"hljs-string\">&quot;unshift&quot;</span>, <span class=\"hljs-string\">&quot;sort&quot;</span>, <span class=\"hljs-string\">&quot;reverse&quot;</span>, <span class=\"hljs-string\">&quot;splice&quot;</span>];<br><span class=\"hljs-comment\">// 将数组的原型保存一份</span><br><span class=\"hljs-keyword\">let</span> arrProto = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>;<br><span class=\"hljs-comment\">// 创建原型 将数组原型拷贝一份</span><br><span class=\"hljs-keyword\">let</span> proto = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(arrProto);<br><span class=\"hljs-comment\">// 重写数组的方法</span><br>methods.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">method</span>) =&gt;</span> &#123;<br>  proto[method] = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-comment\">// AOP 面向切面编程</span><br>    <span class=\"hljs-comment\">// 改变了数组的数据</span><br>    arrProto[method].<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, ...<span class=\"hljs-variable language_\">arguments</span>);<br>    <span class=\"hljs-comment\">// 重新渲染视图</span><br>    <span class=\"hljs-title function_\">render</span>();<br>  &#125;;<br>&#125;);<br><br><span class=\"hljs-comment\">// 观察者模式</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">observe</span>(<span class=\"hljs-params\">obj</span>) &#123;<br>  <span class=\"hljs-comment\">// 判断一个对象是不是数组</span><br>  <span class=\"hljs-comment\">// if(Object.prototype.toString.call(obj) === &#x27;[object Array]&#x27;)&#123;</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(obj)) &#123;<br>    <span class=\"hljs-comment\">// 让观测的对象的原型和我们自己重写的原型建立关系</span><br>    obj.<span class=\"hljs-property\">__proto__</span> = proto;<br>    <span class=\"hljs-keyword\">return</span>;<br>  &#125;<br>  <span class=\"hljs-comment\">// 如果观察的是一个对象的话 对其属性进行响应式监听(set、get)</span><br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">toString</span>.<span class=\"hljs-title function_\">call</span>(obj) === <span class=\"hljs-string\">&quot;[object Object]&quot;</span>) &#123;<br>    <span class=\"hljs-comment\">// 取出对象中的每一个键和值</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> obj) &#123;<br>      <span class=\"hljs-comment\">// 调用响应式处理函数</span><br>      <span class=\"hljs-title function_\">defineReactive</span>(obj, key, obj[key]);<br>    &#125;<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">// 观察obj对象</span><br><span class=\"hljs-title function_\">observe</span>(obj);<br><br><span class=\"hljs-comment\">// 响应式处理</span><br><span class=\"hljs-comment\">// Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">defineReactive</span>(<span class=\"hljs-params\">obj, key, val</span>) &#123;<br>  <span class=\"hljs-comment\">// 检测对象的属性值是否还是对象</span><br>  <span class=\"hljs-title function_\">observe</span>(val);<br>  <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(obj, key, &#123;<br>    <span class=\"hljs-comment\">// 获取</span><br>    <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\"></span>) &#123;<br>      <span class=\"hljs-keyword\">return</span> val;<br>    &#125;,<br>    <span class=\"hljs-comment\">// 设置</span><br>    <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">newVal</span>) &#123;<br>      <span class=\"hljs-comment\">// 检测设置的值是不是对象</span><br>      <span class=\"hljs-title function_\">observe</span>(newVal);<br>      <span class=\"hljs-comment\">// 新值和旧值不相等的时候</span><br>      <span class=\"hljs-keyword\">if</span> (newVal !== val) &#123;<br>        <span class=\"hljs-comment\">// 覆盖掉原来的val值</span><br>        val = newVal;<br>        <span class=\"hljs-comment\">// 通知render函数重新渲染视图</span><br>        <span class=\"hljs-title function_\">render</span>();<br>      &#125;<br>    &#125;,<br>  &#125;);<br>&#125;<br><br><span class=\"hljs-comment\">// obj.name = &#x27;lisi&#x27;</span><br><span class=\"hljs-comment\">// obj.age = 20</span><br><span class=\"hljs-comment\">// console.log(obj.name, obj.age);</span><br><span class=\"hljs-comment\">// 至此 基本可以实现数据发生变化 视图更新的效果</span><br><span class=\"hljs-comment\">// 但是 如果数据有多层呢 也就是属性对应的值也是对象?</span><br><span class=\"hljs-comment\">// obj.phone.name = &#x27;huawei&#x27;</span><br><span class=\"hljs-comment\">// console.log(obj.phone.name);</span><br><br><span class=\"hljs-comment\">// 修改的值和原来的值一样 不需要重新渲染视图</span><br><span class=\"hljs-comment\">// obj.phone.name = &#x27;iphone&#x27;</span><br><br><span class=\"hljs-comment\">// 如果重新为对象obj的phone赋值一个新的对象呢? 视图要重新渲染</span><br><span class=\"hljs-comment\">// obj.phone = &#123;name: &#x27;huawei&#x27;&#125;</span><br><br><span class=\"hljs-comment\">// 并且当修改新的对象的属性值时 视图也要重新渲染</span><br><span class=\"hljs-comment\">// obj.phone.name = &#x27;zs&#x27;</span><br><br><span class=\"hljs-comment\">// 为对象新增属性值呢? 也是没有办法监测到的</span><br><span class=\"hljs-comment\">// obj.sex = &#x27;man&#x27;</span><br><span class=\"hljs-comment\">// $set来解决这个</span><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">$myset</span>(<span class=\"hljs-params\">obj, key, val</span>) &#123;<br>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(obj)) &#123;<br>    <span class=\"hljs-keyword\">return</span> obj.<span class=\"hljs-title function_\">splice</span>(key, val);<br>  &#125;<br>  <span class=\"hljs-title function_\">defineReactive</span>(obj, key, val);<br>&#125;<br><span class=\"hljs-comment\">// $myset(obj, &#x27;sex&#x27;, &#x27;man&#x27;)</span><br><span class=\"hljs-comment\">// 修改新增的属性值 视图也能更新</span><br><span class=\"hljs-comment\">// obj.sex = &#x27;woman&#x27;</span><br><br><span class=\"hljs-comment\">// obj.phone = Object.assign(obj.phone, &#123;price: &#x27;666&#x27;&#125;)</span><br><span class=\"hljs-comment\">// obj.phone.price = 888</span><br><br><span class=\"hljs-comment\">// obj.phone = &#123;...obj.phone, ...&#123;price: &#x27;666&#x27;&#125;&#125;</span><br><span class=\"hljs-comment\">// obj.phone.price = &#x27;888&#x27;</span><br><span class=\"hljs-comment\">// 以后vue涉及到给data中的对象新增属性时 有三种方式</span><br><span class=\"hljs-comment\">// 1、this.$set() || Vue.set()</span><br><span class=\"hljs-comment\">// 2、obj = Object.assign(原对象, 新对象(新增的属性:值))</span><br><span class=\"hljs-comment\">// 2、obj = &#123;...原对象, ...新对象(新增的属性:值)&#125;</span><br><br><span class=\"hljs-comment\">// =================== 数组 ======================</span><br><span class=\"hljs-comment\">// 数组的响应式数据处理依赖的并不是Object.defineProperty 而是对数组的能够引起数据变化的方法进行重写</span><br><span class=\"hljs-comment\">// obj.push(6)</span><br><span class=\"hljs-comment\">// obj.length ++</span><br><span class=\"hljs-comment\">// obj[0] = 88</span><br><span class=\"hljs-comment\">// $myset(obj, &#x27;0&#x27;, 66)</span><br></code></pre></td></tr></table></figure>\n\n\n<h3 id=\"Vue3\"><a href=\"#Vue3\" class=\"headerlink\" title=\"Vue3\"></a>Vue3</h3><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-comment\">// vue3响应式原理利用了es6提供的proxy Api</span><br><span class=\"hljs-comment\">// 可以直接监听到对象和数组内容及长度的变化</span><br><span class=\"hljs-comment\">// 缺点: 兼容性差 支持就用proxy 不支持就用Objcet.defineProperty</span><br><span class=\"hljs-keyword\">let</span> obj = &#123;<br>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;zs&quot;</span>,<br>  <span class=\"hljs-attr\">girlFriend</span>: &#123; <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;刘亦菲&quot;</span> &#125;,<br>  <span class=\"hljs-attr\">arr</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>],<br>&#125;;<br><br><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) &#123;<br>  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;视图重新渲染 ~&quot;</span>);<br>&#125;<br><br><span class=\"hljs-keyword\">let</span> handler = &#123;<br>  <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">target, key</span>) &#123;<br>    <span class=\"hljs-comment\">// Reflect.get(target, propertyKey[, receiver])</span><br>    <span class=\"hljs-comment\">// 获取对象身上某个属性的值，类似于 target[name]。</span><br>    <span class=\"hljs-comment\">// 如果属性的值是一个对象的话 则重新进行代理 设置set&amp;get</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> target[key] == <span class=\"hljs-string\">&quot;object&quot;</span> &amp;&amp; target[key] != <span class=\"hljs-literal\">null</span>) &#123;<br>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(target[key], handler);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">get</span>(target, key);<br>  &#125;,<br>  <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">target, key, val</span>) &#123;<br>    <span class=\"hljs-comment\">// if(target[key] == &#x27;length&#x27;) return true</span><br>    <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">set</span>(target, key, val);<br>    <span class=\"hljs-title function_\">render</span>();<br>    <span class=\"hljs-comment\">// return true表示赋值成功 如果不返回true 在严格模式下可能会报TypeError</span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>  &#125;,<br>&#125;;<br><br><span class=\"hljs-keyword\">let</span> proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(obj, handler);<br><span class=\"hljs-comment\">// 使用代理后的对象</span><br><span class=\"hljs-comment\">// console.log(proxy.name);</span><br><span class=\"hljs-comment\">// console.log(proxy.grilFriend);</span><br><br><span class=\"hljs-comment\">// proxy.name = &#x27;lisi&#x27;</span><br><span class=\"hljs-comment\">// 修改深层次的对象的属性 无法监听到</span><br><span class=\"hljs-comment\">// proxy.grilFriend.name = &#x27;黄圣依&#x27;</span><br><span class=\"hljs-comment\">// console.log(proxy.name);</span><br><span class=\"hljs-comment\">// console.log(proxy.grilFriend);</span><br><span class=\"hljs-comment\">// console.log(obj.name);</span><br><span class=\"hljs-comment\">// console.log(obj.grilFriend);</span><br><br>proxy.<span class=\"hljs-property\">arr</span>[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">&quot;11&quot;</span>;<br>proxy.<span class=\"hljs-property\">arr</span>.<span class=\"hljs-property\">length</span>++;<br><span class=\"hljs-comment\">// console.log(proxy.arr.length);</span><br><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(obj.<span class=\"hljs-property\">arr</span>.<span class=\"hljs-property\">length</span>);<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"reactive-函数\"><a href=\"#reactive-函数\" class=\"headerlink\" title=\"reactive 函数\"></a>reactive 函数</h2><ul>\n<li>作用: 定义一个对象类型的响应式数据（基本类型不要用它，控制台会报警告，要用 ref 函数）</li>\n<li>语法：const 代理对象&#x3D; reactive(源对象)<ul>\n<li>接收一个对象（或数组），返回一个代理对象（Proxy 的实例对象，简称 proxy 对象）</li>\n</ul>\n</li>\n<li>reactive 定义的响应式数据是“深层次的”。</li>\n<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>\n</ul>\n<h3 id=\"为什么就可以变成响应式的呢？\"><a href=\"#为什么就可以变成响应式的呢？\" class=\"headerlink\" title=\"为什么就可以变成响应式的呢？\"></a>为什么就可以变成响应式的呢？</h3><p>这是因为当我们使用 reactive 函数处理我们的数据之后，数据再次被使用时就会进行依赖收集；</p>\n<p>当数据发生改变时，所有收集到的依赖都是进行对应的响应式操作（比如更新界面）；</p>\n<p>事实上，我们编写的 data 选项，也是在内部交给了 reactive 函数将其变成响应式对象的；</p>\n","categories":["前端"],"tags":["Vue"]},{"title":"uniapp-学习","url":"/2023/06/12/uniapp-%E5%AD%A6%E4%B9%A0/","content":"<p>待更新~</p>\n","categories":["前端"],"tags":["uniApp"]},{"title":"小程序 学习","url":"/2023/06/09/%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"浅谈小程序\"><a href=\"#浅谈小程序\" class=\"headerlink\" title=\"浅谈小程序\"></a>浅谈小程序</h2><p>  在 2016 年的「微信公开课 Pro」演讲中，微信事业群总裁张小龙这样描述了小程序的前景与未来：</p>\n<blockquote>\n<p>“ 小程序是一种不需要下载安装即可使用的应用，它实现了应用 “触手可及” 的梦想，用户扫一扫或者搜一下即可打开应用。也体现了 “用完即走” 的理念，用户不用关心是否安装太多应用的问题。应用将无处不在，随时可用，但又无须安装卸载 “。</p>\n</blockquote>\n<p>  小程序刚发布的时候要求压缩包的体积不能大于 1M，否则无法通过，在 2017 年 4 月做 了改进，由原来的 1M 提升到 2M；</p>\n<p>  2017 年 1 月 9 日 0 点，万众瞩目的微信第一批小程序正式低调上线。</p>\n<p>  而在 2020年的「WWDC 苹果全球开发者大会」中，轻应用则被作为 iOS 14 的主要功能进行强调与推介：</p>\n<p>  <img src=\"/../images/wx1.png\" alt=\"你好\"></p>\n<blockquote>\n<p>App Clip 就是一种无需用户在 iPhone 或 iPad 上安装完整的应用程序，就可以访问使用该应用程序的部分功能的轻量级应用，它们专注于处理简单快速的任务。</p>\n</blockquote>\n<p>不论是张小龙对「微信小程序」略带文艺的描述，还是在 WWDC 上对于「轻应用」在 iOS 生态中的地位描述，我们都能大抵能理解小程序诞生的初衷。而如果我们把时间从这两场发布会的转至今日，却会发现小程序早已不再局限于「用完即走」与「快速打开」，各式各样的小程序已呈现百花齐放的状态，不论是工具小程序，内容小程序，交易小程序，直播小程序，各种类型应有尽有。</p>\n<p>不妨让我尝试用自己的工作日常举例，早上出门上班，我会打开「天府健康通」扫描地铁场所码，并把健康码给地铁安检查看，临近中午 11 点 30 分，我会用「美团」或「饿了么」为自己订一份工作餐，吃完午饭后我会打开「动物餐厅」看看小猫咪又赚了多少小鱼干，下午会议时使用「腾讯文档」查看会议纪要，快下班的时候用「叮咚买菜」购置晚饭所需的食材，晚上回家做饭时，用「懒饭 App」看看想吃的番茄肥牛饭怎么做。</p>\n<p><img src=\"/../images/wx2.png\" alt=\"你好\"></p>\n<p>时至今日，当我们说到小程序时，也不仅仅在特指微信小程序，各式各样的平台都纷纷推出了自己专属的小程序平台，不论支付宝、字节跳动、美团还是百度等其他互联网大厂，都纷纷推出了自己专属的小程序平台，且都基于自己的生态业务，为小程序提供流量进行支持，希望用户与开发者能够选择自有平台中的小程序进行开发。</p>\n<p>随着小程序业务的愈演愈烈，越来越多的流量都被引入了互联网巨头的小程序战场中，但在这个过程中，对于战场中「封闭，不透明」的吐槽与争议也逐渐出现，无数企业都希望自己的应用中也能具备运行小程序的能力，希望能够借此抗争小程序被引入寡头所控制的战场，但「知易行难」，快速完成对小程序的底层与容器的研发，所需要花费的精力与时间并不是短时间就能够完成的。</p>\n<p>事实上，小程序可以被理解为是「移动应用 App」的一个细分子集，如果按照「平等透明」的设想，小程序不应该仅仅存在于微信之中，那些我们并不经常使用的应用都可以通过小程序进行重新优化，我们可以通过各式各样的专门应用打开相关的小程序，从而对那些「太重的应用」进行减负操作。</p>\n<p>当然了，小程序还会有这样一些特性需要我们注意：</p>\n<ul>\n<li><p>小程序不具备「被关注」的能力，获取流量留存用户的操作需要由独立应用或其他渠道完成;</p>\n</li>\n<li><p>小程序不具备「推送消息与群发消息」的能力，对用户的信息触达与消息传递的操作需要由其他渠道完成;</p>\n</li>\n<li><p>小程序不具备「跨 App 分享 」的能力，因此对于小程序的分享与打开路径，需要在设计产品时提前思考，而不是把鸡蛋放在一个篮子里;</p>\n</li>\n</ul>\n<h3 id=\"什么样的应用适合使用小程序开发\"><a href=\"#什么样的应用适合使用小程序开发\" class=\"headerlink\" title=\"什么样的应用适合使用小程序开发\"></a>什么样的应用适合使用小程序开发</h3><p>虽然小程序市场时至今日依然是一片蓝海，但我想也不是所有应用「都可以，都应该」使用小程序开发的。</p>\n<p>基于我们的经验与积累来说，符合「逻辑简单，使用低频，对性能要求不极致」的应用场景，更加适合使用小程序进行研发。</p>\n<h4 id=\"逻辑简单：\"><a href=\"#逻辑简单：\" class=\"headerlink\" title=\"逻辑简单：\"></a>逻辑简单：</h4><p>是指应用的操作逻辑并不十分复杂，各类生活服务（如打车，订餐，查地图与导航等等）都需要给用户提供简单清晰的操作逻辑，而这一类也天然的符合起初小程序「用完即走」的定义，因此十分符合使用小程序研发。一些逻辑复杂的应用场景想要通过小程序进行适配，就可能会面临更多的设计与研发困难，同时在性能和体验也可能会面对更多需要解决的问题。</p>\n<h4 id=\"使用低频：\"><a href=\"#使用低频：\" class=\"headerlink\" title=\"使用低频：\"></a>使用低频：</h4><p>是指小程序的使用频率不应该太高，比如社交类的钉钉或飞书，金融类的掌上生活或浦大喜奔，媒体类的网易云音乐或斗鱼都不太适合使用小程序进行重新设计。对于用户使用的频率较高的应用来说，直接打开应用进行体验的步骤肯定最快的，此外由于某些行业的特殊性质（比如具备交易，支付等能力）要求，对于安全性与保密性的首选风险判断原则，也不宜使用常见的小程序进行设计。</p>\n<h4 id=\"对性能要求不极致：\"><a href=\"#对性能要求不极致：\" class=\"headerlink\" title=\"对性能要求不极致：\"></a>对性能要求不极致：</h4><p>是指由于小程序始终存在于某个独立应用（也被称为宿主应用）中，考虑到目前的性能与研发所限制，暂时不太适合开发对于这两者有更高要求的移动应用。比如把原神，王者荣耀这样的游戏应用通过小程序进行重新设计，在目前来说肯定是不现实的。</p>\n<p>当然，随着相关研发实力的增强与产业生态的逐渐补充，也有越来越多的「不可能」变为了「可能」，比如华西证券的「华彩人生」，浦发银行的「浦大喜奔」，某省的移动警务平台等客户都选择使用小程序容器方案进行落地实现</p>\n<h3 id=\"小程序与-H5，原生应用有何区别？\"><a href=\"#小程序与-H5，原生应用有何区别？\" class=\"headerlink\" title=\"小程序与 H5，原生应用有何区别？\"></a>小程序与 H5，原生应用有何区别？</h3><p>很多朋友在了解小程序技术的时候，都会有这样的疑惑“到底与 H5，原生应用”这些技术相比，小程序具有哪些优势与劣势呢？</p>\n<h4 id=\"H5-移动应用\"><a href=\"#H5-移动应用\" class=\"headerlink\" title=\"H5 移动应用\"></a>H5 移动应用</h4><p>我们常说的 H5 其实也通常可以被视为一种 Web App，相比于我们在桌面端浏览器中打开的网页，主要是增加了一些响应式的设计与交互优化，从而使得这些网页更适合在移动端的浏览器中显示运行。既然是网页应用，那依然是基于 JavaScript，CSS 和 HTML 进行实现的，由于是基于各类前端技术栈进行实现，最大的好处就是快速、简单、方便，且有各种技术资料可以参考。</p>\n<p>同样，H5 的缺点与优点也是并存的，比如由于技术已经很成熟了，对于前端经验欠缺的新人来说，面对各式各样的框架，模块、任务管理工具，UI 库可能会出现无从下手的问题；此外相比于原生应用，对于系统权限的获取（比如数据缓存能力，网络通信状态等）都显得比较鸡肋，当低性能的设备加载包含复杂逻辑的页面时，会出现明显的卡顿与延迟问题。</p>\n<h4 id=\"原生应用\"><a href=\"#原生应用\" class=\"headerlink\" title=\"原生应用\"></a>原生应用</h4><p>原生应用也被叫做 Native App，相比于 H5 应用通过前端三大件进行实现不同，原生应用主要会采用 iOS 与 Android 的专有语言 Object-C（或 Swift），Java（或 Kotlin）进行实现，大多我们所常见的国民应用，比如微信，支付宝等都属于这种原生应用。</p>\n<p>既然被叫做「原生应用」，就像操作系统的亲儿子一样，天然在性能与体验上具备优秀的潜质，也有组件库丰富，接口支持完善等各种优势特点。但原生应用最大的缺陷就是不能跨平台研发，以目前的主流市场为例，必须要支持 iOS 与 Android 两个主流平台。</p>\n<h4 id=\"混合应用\"><a href=\"#混合应用\" class=\"headerlink\" title=\"混合应用\"></a>混合应用</h4><p>混合应用一般被称为 Hybrid App。简单来说，混合应用就是将原生功能封装成对应的 JS 接口，在前端使用 H5 来开发对应的 App （即 H5 作为内容+原生应用作为壳） ，看上去虽然是一个移动原生应用整体，但实际的页面还是网页，一套代码可以生成 iOS 与 Android 两种安装包，开发成本较低。</p>\n<p>我们常见的淘宝，京东等应用由于更新与优化节奏都十分快速，为了更好的响应「贴近用户」的目标，应用中有的功能通过原生 Native 实现，有的功能则通过 H5 页面进行实现，这种应用就属于我们所说的混合应用。</p>\n<h4 id=\"小程序\"><a href=\"#小程序\" class=\"headerlink\" title=\"小程序\"></a>小程序</h4><p>严格意义上来说，小程序并不属于以上 3 种应用的任何一种。小程序主要通过 JavaScript 与 CSS 这种常见的前端技术进行开发，但又没有完全使用 HTML 进行实现，在不同的操作系统中，JavaScript 代码分别运行在 iOS 的 JavaScriptCore 与 Android 的 X5 JSCore 中，各家小程序平台或多或少都有一部分自研的核心，因此渲染视图层的组件也有所不同。</p>\n<p><img src=\"/../images/wx3.png\" alt=\"你好\"></p>\n<p>相比「 H5 移动应用」与「 移动原生应用」，小程序具备如下优势：</p>\n<ul>\n<li>具备跨平台的能力，一套代码可以在 iOS 与 Android 两个平台中运行；</li>\n<li>远超过 H5 的体验（支持本地缓存，Webview，有丰富的组件与支持库）；</li>\n<li>能获取更多系统权限，完成更加丰富的产品设计；</li>\n<li>可以避免 DOM 泄露（不使用常用的 window 对象与 document 对象）；</li>\n<li>开发简单，上手成本低（比如 FinClip 提供了 FIDE 与开发文档）；</li>\n</ul>\n<h4 id=\"常见的小程序开发框架有哪些\"><a href=\"#常见的小程序开发框架有哪些\" class=\"headerlink\" title=\"常见的小程序开发框架有哪些\"></a>常见的小程序开发框架有哪些</h4><p>以主要的小程序开发框架举例，腾讯云社区的「极乐君」将不同平台下小程序支持的力度整理在一张表中：</p>\n<p><img src=\"/../images/wx4.png\" alt=\"你好\"></p>\n<h2 id=\"小程序开发环境\"><a href=\"#小程序开发环境\" class=\"headerlink\" title=\"小程序开发环境\"></a>小程序开发环境</h2><p>1、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\">微信文档</a></p>\n<p>2、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\">微信开发工具下载</a></p>\n<p>3、<a href=\"https://mp.weixin.qq.com/\">注册小程序账号</a></p>\n<p><img src=\"/../images/wx5.png\" alt=\"账号分类\"></p>\n<p><img src=\"/../images/wx6.png\" alt=\"小程序注册\"></p>\n<h2 id=\"小程序特点\"><a href=\"#小程序特点\" class=\"headerlink\" title=\"小程序特点\"></a>小程序特点</h2><ol>\n<li><p>没有 DOM</p>\n</li>\n<li><p>组件化开发： 具备特定功能效果的代码集合</p>\n</li>\n<li><p>体积小，单个压缩包体积不能大于 2M，否则无法上线</p>\n</li>\n<li><p>小程序的四个重要的文件</p>\n<ul>\n<li>.js —&gt; js 逻辑 —&gt; js</li>\n<li>.wxml —&gt; view 结构—–&gt; html</li>\n<li>.wxss —&gt; view 样式 —–&gt; css</li>\n<li>.json —-&gt; view 配置—– &gt; json 文件</li>\n</ul>\n</li>\n<li><p>小程序适配方案: rpx (responsive pixel 响应式像素单位)</p>\n</li>\n</ol>\n<ul>\n<li>小程序适配单位： rpx</li>\n<li>规定任何屏幕下宽度为 750rpx</li>\n<li>小程序会根据屏幕的宽度不同自动计算 rpx 值的大小</li>\n<li>Iphone6 下： 1rpx &#x3D; 1 物理像素 &#x3D; 0.5px</li>\n</ul>\n<p><img src=\"/../images/wx7.png\" alt=\"尺寸单位\"></p>\n<h2 id=\"小程序配置\"><a href=\"#小程序配置\" class=\"headerlink\" title=\"小程序配置\"></a>小程序配置</h2><h3 id=\"全局配置\"><a href=\"#全局配置\" class=\"headerlink\" title=\"全局配置\"></a>全局配置</h3><blockquote>\n<p>作用： 用于为整个应用进行选项设置</p>\n</blockquote>\n<p><img src=\"/../images/wx8.png\" alt=\"全局配置\"></p>\n<h3 id=\"页面配置\"><a href=\"#页面配置\" class=\"headerlink\" title=\"页面配置\"></a>页面配置</h3><pre><code>配图参上\n\n作用：用于为指定的页面进行配置\n\n注：页面配置的优先级高于全局配置\n</code></pre>\n<h3 id=\"sitemap-配置\"><a href=\"#sitemap-配置\" class=\"headerlink\" title=\"sitemap 配置\"></a>sitemap 配置</h3><p>   配图参上</p>\n<p>   作用：配置其小程序页面是否允许微信索引</p>\n<h2 id=\"小程序基础\"><a href=\"#小程序基础\" class=\"headerlink\" title=\"小程序基础\"></a>小程序基础</h2><h3 id=\"框架接口\"><a href=\"#框架接口\" class=\"headerlink\" title=\"框架接口\"></a>框架接口</h3><p><img src=\"/../images/wx9.png\" alt=\"框架接口\"></p>\n<h4 id=\"App\"><a href=\"#App\" class=\"headerlink\" title=\"App\"></a>App</h4><ol>\n<li>全局 app.js 中执行 App()</li>\n<li>生成当前应用的实例对象</li>\n<li>getApp()获取全局应用实例</li>\n</ol>\n<h4 id=\"Page\"><a href=\"#Page\" class=\"headerlink\" title=\"Page\"></a>Page</h4><ol>\n<li>页面.js 中执行 Page()</li>\n<li>生成当前页面的实例</li>\n<li>通过 getCurrentPages() 获取页面实例</li>\n</ol>\n<h3 id=\"WXML-语法\"><a href=\"#WXML-语法\" class=\"headerlink\" title=\"WXML 语法\"></a>WXML 语法</h3><p><img src=\"/../images/wx10.png\" alt=\"WXML 语法\"></p>\n<blockquote>\n<p>具体看官方文档 ~</p>\n</blockquote>\n<h4 id=\"ToDoList\"><a href=\"#ToDoList\" class=\"headerlink\" title=\"ToDoList\"></a>ToDoList</h4><ul>\n<li>todolist.wxml</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;view <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;<br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;header-input&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">bindinput</span>=<span class=\"hljs-string\">&quot;inputHandler&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&#x27;&#123;&#123;text.title?text.title:&quot;&quot;&#125;&#125;&#x27;</span>/&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;primary&quot;</span> <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;mini&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">&quot;add&quot;</span>&gt;</span>添加<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;show&quot;</span> <span class=\"hljs-attr\">wx:if</span>=<span class=\"hljs-string\">&quot;&#123;&#123;todoList.length &gt; 0&#125;&#125;&quot;</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;todoList&#125;&#125;&quot;</span> <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;id&quot;</span>&gt;</span>&#123;&#123;item.id + 1&#125;&#125;. &#123;&#123;item.title&#125;&#125;</span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;warn&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">size</span>=<span class=\"hljs-string\">&quot;mini&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">&quot;del&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        <span class=\"hljs-attr\">data-index</span>=<span class=\"hljs-string\">&quot;&#123;&#123;index&#125;&#125;&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">        &gt;</span>删除<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span><br><span class=\"language-xml\">        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br><br>    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span> <span class=\"hljs-attr\">wx:else</span>&gt;</span>暂无待办事项<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br>&lt;/view&gt;<br></code></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>todolist.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Page</span>(&#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 页面的初始数据</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-attr\">data</span>: &#123;<br>    <span class=\"hljs-attr\">todoList</span>: [<br>      &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;吃饭&quot;</span> &#125;,<br>      &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;睡觉&quot;</span> &#125;,<br>      &#123; <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&quot;打豆豆&quot;</span> &#125;,<br>    ],<br>    <span class=\"hljs-comment\">// 保存用户输入的数据</span><br>    <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>  &#125;,<br>  <span class=\"hljs-comment\">// 用户输入数据后会触发的回调</span><br>  <span class=\"hljs-title function_\">inputHandler</span>(<span class=\"hljs-params\">e</span>) &#123;<br>    <span class=\"hljs-comment\">// 保存用户输入的数据</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setData</span>(&#123;<br>      <span class=\"hljs-attr\">text</span>: &#123;<br>        <span class=\"hljs-attr\">id</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">todoList</span>.<span class=\"hljs-property\">length</span>,<br>        <span class=\"hljs-attr\">title</span>: e.<span class=\"hljs-property\">detail</span>.<span class=\"hljs-property\">value</span>,<br>      &#125;,<br>    &#125;);<br>  &#125;,<br>  <span class=\"hljs-comment\">// 添加</span><br>  <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-comment\">// 修改数据并且清空输入框</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setData</span>(&#123;<br>      <span class=\"hljs-attr\">todoList</span>: [...<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">todoList</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">text</span>],<br>      <span class=\"hljs-attr\">text</span>: <span class=\"hljs-string\">&quot;&quot;</span>,<br>    &#125;);<br>  &#125;,<br>  <span class=\"hljs-comment\">// 删除</span><br>  <span class=\"hljs-title function_\">del</span>(<span class=\"hljs-params\">e</span>) &#123;<br>    <span class=\"hljs-comment\">// 获取传过来的索引</span><br>    <span class=\"hljs-comment\">// console.log(e.target.dataset.index)</span><br>    <span class=\"hljs-keyword\">var</span> index = e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">index</span>;<br>    <span class=\"hljs-comment\">// 删除数据</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">todoList</span>.<span class=\"hljs-title function_\">splice</span>(index, <span class=\"hljs-number\">1</span>);<br>    <span class=\"hljs-comment\">// 只要修改了数据 一定要重新setData</span><br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setData</span>(&#123;<br>      <span class=\"hljs-attr\">todoList</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">todoList</span>,<br>    &#125;);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>todolist.wxss</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">.<span class=\"hljs-property\">container</span> &#123;<br>    <span class=\"hljs-attr\">display</span>: flex;<br>    flex-<span class=\"hljs-attr\">direction</span>: column;<br>    align-<span class=\"hljs-attr\">items</span>: center;<br>&#125;<br>.<span class=\"hljs-property\">header</span> &#123;<br>    <span class=\"hljs-attr\">display</span>: flex;<br>    margin-<span class=\"hljs-attr\">top</span>: 20rpx;<br>&#125;<br>.<span class=\"hljs-property\">header</span>-input &#123;<br>    <span class=\"hljs-attr\">height</span>: 64rpx;<br>    line-<span class=\"hljs-attr\">height</span>: 64rpx;<br>    <span class=\"hljs-attr\">border</span>: 1px solid #<span class=\"hljs-number\">000</span>;<br>    text-<span class=\"hljs-attr\">align</span>: center;<br>    margin-<span class=\"hljs-attr\">right</span>: 20rpx;<br>&#125;<br>.<span class=\"hljs-property\">show</span> &#123;<br>    margin-<span class=\"hljs-attr\">top</span>: 20rpx;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Tab\"><a href=\"#Tab\" class=\"headerlink\" title=\"Tab\"></a>Tab</h4><ul>\n<li>tab.wxml</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">&lt;view <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;<br>  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">view</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">    <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;tab &#123;&#123;index == current ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">    <span class=\"hljs-attr\">bindtap</span>=<span class=\"hljs-string\">&quot;changeCurrent&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">    <span class=\"hljs-attr\">data-index</span>=<span class=\"hljs-string\">&quot;&#123;&#123;index&#125;&#125;&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">    <span class=\"hljs-attr\">wx:for</span>=<span class=\"hljs-string\">&quot;&#123;&#123;tabList&#125;&#125;&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">    <span class=\"hljs-attr\">wx:key</span>=<span class=\"hljs-string\">&quot;*this&quot;</span></span></span><br><span class=\"hljs-tag\"><span class=\"language-xml\">  &gt;</span></span><br><span class=\"language-xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span></span><br><span class=\"language-xml\">  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">view</span>&gt;</span></span><br>&lt;/view&gt;<br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li>tab.js</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Page</span>(&#123;<br>  <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">   * 页面的初始数据</span><br><span class=\"hljs-comment\">   */</span><br>  <span class=\"hljs-attr\">data</span>: &#123;<br>    <span class=\"hljs-attr\">tabList</span>: [<span class=\"hljs-string\">&quot;首页&quot;</span>, <span class=\"hljs-string\">&quot;购物车&quot;</span>, <span class=\"hljs-string\">&quot;我的&quot;</span>],<br>    <span class=\"hljs-attr\">current</span>: <span class=\"hljs-number\">0</span>,<br>  &#125;,<br>  <span class=\"hljs-title function_\">changeCurrent</span>(<span class=\"hljs-params\">e</span>) &#123;<br>    <span class=\"hljs-comment\">// 在事件处理函数中，通过 event.target.dataset.参数名 即可获取到具体参数的值</span><br>    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e.<span class=\"hljs-property\">currentTarget</span>.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">index</span>);<br>    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setData</span>(&#123;<br>      <span class=\"hljs-attr\">current</span>: e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">index</span>,<br>    &#125;);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n\n<ul>\n<li>tab.wxss</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><code class=\"hljs js\">.<span class=\"hljs-property\">container</span> &#123;<br>    <span class=\"hljs-attr\">display</span>: flex;<br>    justify-<span class=\"hljs-attr\">content</span>: space-around;<br>&#125;<br>.<span class=\"hljs-property\">tab</span> &#123;<br>    text-<span class=\"hljs-attr\">align</span>: center;<br>    <span class=\"hljs-attr\">width</span>: 200rpx;<br>    <span class=\"hljs-attr\">border</span>: 1px solid black;<br>&#125;<br>.<span class=\"hljs-property\">active</span> &#123;<br>    border-<span class=\"hljs-attr\">bottom</span>: 2px solid red;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"target-和-currentTarget-的区别？\"><a href=\"#target-和-currentTarget-的区别？\" class=\"headerlink\" title=\"target 和 currentTarget 的区别？\"></a>target 和 currentTarget 的区别？</h4><blockquote>\n<p>target 是触发该事件的源头组件，而 currentTarget 则是当前事件所绑定的组件</p>\n</blockquote>\n<p><img src=\"/../images/wx11.png\" alt=\"target 和 currentTarget 的区别\"></p>\n","categories":["前端"],"tags":["微信小程序"]}]